Folder structure and content for: /home/ngobiro/projects/pngobiro.github.io/colleges/tvet/certificate/Craft Certificate in Information Technology/Communication/pastpapers/knec/examples

. Designing Long HTML Files for Efficien.md
 Content:
 # Designing Long HTML Files for Efficient `apply_diff` Usage
 
 When working with long HTML files that will be updated using `apply_diff` functionality, following specific structural practices can make your updates more efficient and precise.
 
 ## Core Principles
 
 1. **Modular Structure**: Organize your HTML into logical, self-contained sections
 2. **Consistent Formatting**: Use consistent indentation and formatting throughout
 3. **Unique Identifiers**: Ensure elements have unique IDs or distinctive attributes
 4. **Semantic Structure**: Use semantic HTML elements to create a clear document outline
 
 ## Specific Implementation Techniques
 
 ### 1. Use Clear Section Boundaries
 
 ```html
 <!-- START: Header Section -->
 <header id="main-header">
   <!-- header content -->
 </header>
 <!-- END: Header Section -->
 
 <!-- START: Main Content Section -->
 <main id="content">
   <!-- main content -->
 </main>
 <!-- END: Main Content Section -->
 ```
 
 These comment markers create clear boundaries for applying diffs to specific sections.
 
 ### 2. Add Unique IDs to Elements
 
 ```html
 <section id="product-listing">
   <article id="product-123" class="product">...</article>
   <article id="product-124" class="product">...</article>
 </section>
 ```
 
 ### 3. Data Attributes for Versioning
 
 ```html
 <div id="pricing-table" data-version="1.2">
   <!-- content that might change in future updates -->
 </div>
 ```
 
 ### 4. Template Regions
 
 ```html
 <!-- TEMPLATE:REGION:user-profile -->
 <div class="user-profile">
   <h2>User Profile</h2>
   <div class="profile-content">
     <!-- dynamic content -->
   </div>
 </div>
 <!-- /TEMPLATE:REGION:user-profile -->
 ```
 
 ### 5. Consistent Class Naming Conventions
 
 Use consistent naming patterns (like BEM) to make specific sections easier to target:
 
 ```html
 <div class="card card--featured">
   <div class="card__header">...</div>
   <div class="card__body">...</div>
   <div class="card__footer">...</div>
 </div>
 ```
 
 ### 6. Line Breaks for Better Diff Detection
 
 Place each HTML attribute on its own line for complex elements to make attribute changes easier to detect and apply:
 
 ```html
 <button 
   id="submit-button"
   class="btn btn-primary"
   data-action="submit"
   aria-label="Submit form">
   Submit
 </button>
 ```
 
 ## Best Practices for Maintainability
 
 ### 7. Consistent Indentation
 
 Use consistent indentation (2 or 4 spaces) throughout your HTML files to make structural changes more apparent in diffs.
 
 ### 8. Meaningful Comments
 
 Add comments before complex sections to make it easier to understand the purpose of each part when reviewing diffs:
 
 ```html
 <!-- Product carousel with automatic rotation and manual controls -->
 <div id="product-carousel" class="carousel">
   <!-- carousel content -->
 </div>
 ```
 
 ### 9. Avoid Unnecessary Whitespace Changes
 
 Be consistent with whitespace to avoid meaningless diff changes that make it harder to identify actual content changes.
 
 ### 10. Use Descriptive Element Structure
 
 Structure your elements in a way that makes their relationships clear, which helps when applying diffs to specific parts of the document:
 
 ```html
 <form id="checkout-form">
   <fieldset id="customer-info">
     <legend>Customer Information</legend>
     <!-- customer fields -->
   </fieldset>
   <fieldset id="payment-info">
     <legend>Payment Details</legend>
     <!-- payment fields -->
   </fieldset>
 </form>
 ```
 
 By implementing these practices, your HTML will be more amenable to efficient diff application, making updates more precise and less prone to errors.

. PDF to HTML Conversion Plan.md
 Content:
 # PDF to HTML Conversion Plan
 
 **Instructions Reference:** examples/pdf_to_html_instructions.md
 
 **Target PDFs (Prioritized Order):**
 - [List PDFs to be converted here]
 - example1.pdf
 - example2.pdf
 - example3.pdf
 
 **Setup Tasks:**
 - [ ] Ensure `styles.css` exists (Copy from examples/ if needed)
 - [ ] Ensure `js/sidebar-navigation.js` exists (Copy from examples/js/ if needed)
 - [ ] Create `images/` directory for figures and illustrations
 - [ ] Ensure verification tools are available in examples/:
     - [ ] verify_pastpapers.py
     - [ ] setup_chromedriver.py
     - [ ] requirements.txt
 
 **Standard Steps for Each PDF:**
 1. [ ] PDF to MMD Conversion
 2. [ ] Create Clean HTML Template
 3. [ ] Update Header
 4. [ ] Populate Main Content
     - [ ] Download Figures/Images (if applicable)
 5. [ ] Add Answers
 6. [ ] Embed Sidebar
 7. [ ] Update Navigation Links
 8. [ ] Format Special Content (if needed)
 9. [ ] Run Automated Verification:
     - [ ] Check HTML structure
     - [ ] Verify navigation links
     - [ ] Test styling
     - [ ] Validate images
     - [ ] Check sidebar functionality
 10. [ ] Final Review & Browser Test
 
 **Conversion Status:**
 
 ---
 **1. [filename].pdf -> [filename].html**
 - [ ] Step 1: PDF to MMD Conversion ([filename].mmd)
 - [ ] Step 2: Create Clean HTML Template ([filename].html)
 - [ ] Step 3: Update Header
 - [ ] Step 4: Populate Main Content (Instructions & Questions)
     - [ ] Step 4.1: Download Figures/Images (if applicable)
 - [ ] Step 4b: Add Answers
 - [ ] Step 5: Embed Sidebar
 - [ ] Step 6: Update Navigation Links
 - [ ] Step 7: Verify Links
 - [ ] Step 8: Format Special Content (if needed)
 - [ ] Step 9: Run Automated Verification
 - [ ] Step 10: Final Review & Browser Test
 
 **Status: [IN PROGRESS/COMPLETED/FAILED]** *(Additional notes)*
 ---
 
 **2. [filename].pdf -> [filename].html**
 - [ ] Step 1: PDF to MMD Conversion ([filename].mmd)
 - [ ] Step 2: Create Clean HTML Template ([filename].html)
 - [ ] Step 3: Update Header
 - [ ] Step 4: Populate Main Content (Instructions & Questions)
     - [ ] Step 4.1: Download Figures/Images (if applicable)
 - [ ] Step 4b: Add Answers
 - [ ] Step 5: Embed Sidebar
 - [ ] Step 6: Update Navigation Links
 - [ ] Step 7: Verify Links
 - [ ] Step 8: Format Special Content (if needed)
 - [ ] Step 9: Run Automated Verification
 - [ ] Step 10: Final Review & Browser Test
 
 **Status: [IN PROGRESS/COMPLETED/FAILED]** *(Additional notes)*
 ---
 
 **Verification Tools:**
 - verify_pastpapers.py: Main verification script
 - setup_chromedriver.py: ChromeDriver configuration
 - requirements.txt: Dependencies (selenium, beautifulsoup4, html5lib)
 
 **Common Issues and Solutions:**
 - If PDF to MMD conversion fails with "Bad page count" error, try using alternative OCR method
 - For math equations, ensure proper MathJax formatting ($...$ for inline, $$...$$ for display)
 - For images, always download to local images/ directory and use relative paths
 - When verification fails, compare against working examples in examples/ directory
 
 **Last Updated:** [Date]

. analyze_missing_papers.py
 Content:
 #!/usr/bin/env python3
 """
 Analyze missing past papers by comparing existing papers against expected patterns.
 """
 
 from datetime import datetime
 import os
 import re
 from typing import List, Tuple
 
 def get_current_period() -> Tuple[int, str]:
     """Get current year and exam period (march/july/november) based on current date."""
     now = datetime.now()
     year = now.year
     
     if now.month <= 3:
         period = 'march'
     elif now.month <= 7:
         period = 'july'
     else:
         period = 'november'
         
     return year, period
 
 def list_existing_papers(directory: str) -> List[Tuple[int, str]]:
     """Get list of existing papers from HTML files."""
     papers = []
     pattern = re.compile(r'(\d{4})([mjn])\.html')
     
     for filename in os.listdir(directory):
         match = pattern.match(filename)
         if match:
             year = int(match.group(1))
             period_code = match.group(2)
             period = {
                 'm': 'march',
                 'j': 'july',
                 'n': 'november'
             }.get(period_code)
             if period:
                 papers.append((year, period))
     
     return sorted(papers)
 
 def get_expected_periods(year: int) -> List[str]:
     """Get expected exam periods for a given year."""
     return ['march', 'july', 'november']
 
 def analyze_missing_papers(directory: str = '.') -> List[Tuple[int, str]]:
     """
     Analyze which papers are missing based on patterns:
     - Two papers per year normally (July and November)
     - March papers sometimes available
     - Range: From oldest existing to current/latest possible
     """
     existing = list_existing_papers(directory)
     if not existing:
         return []
     
     # Get range
     oldest_year = min(year for year, _ in existing)
     current_year, current_period = get_current_period()
     
     # Build list of missing papers
     missing = []
     
     for year in range(oldest_year, current_year + 1):
         expected_periods = get_expected_periods(year)
         existing_periods = [period for y, period in existing if y == year]
         
         # For current year, only include up to current period
         if year == current_year:
             expected_periods = [p for p in expected_periods 
                               if expected_periods.index(p) <= expected_periods.index(current_period)]
         
         # Add missing periods
         for period in expected_periods:
             if period not in existing_periods:
                 missing.append((year, period))
     
     return sorted(missing)
 
 def generate_report() -> str:
     """Generate a report of missing papers."""
     missing = analyze_missing_papers()
     
     report = ["# Missing Past Papers Report", ""]
     report.append(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
     report.append(f"Current Period: {get_current_period()[1].title()} {get_current_period()[0]}")
     report.append("")
     
     if not missing:
         report.append("No missing papers detected.")
         return "\n".join(report)
     
     report.append("## Missing Papers")
     report.append("")
     
     current_year = None
     for year, period in missing:
         if year != current_year:
             report.append(f"\n### {year}")
             current_year = year
         report.append(f"- {period.title()}")
     
     return "\n".join(report)
 
 if __name__ == '__main__':
     print(generate_report())

. example-index.html
 Content:
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Computer Application II Past Papers Collection</title>
     <link rel="stylesheet" href="styles.css">
     <script src="js/sidebar-navigation.js" defer></script>
     <script src="js/sidebar-include.js" defer></script> <!-- Note: Sidebar injection might need adjustment based on final structure -->
     <style>
         .paper-grid {
             display: grid;
             grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
             gap: 1.5rem;
             margin: 2rem 0;
         }
 
         .paper-card {
             background: white;
             border: 1px solid var(--border-color);
             border-radius: 8px;
             padding: 1.5rem;
             box-shadow: 0 2px 4px rgba(0,0,0,0.05);
             transition: transform 0.2s, box-shadow 0.2s;
         }
 
         .paper-card:hover {
             transform: translateY(-2px);
             box-shadow: 0 4px 8px rgba(0,0,0,0.1);
         }
 
         .paper-card h3 {
             color: var(--primary-color);
             margin-bottom: 1rem;
         }
 
         .paper-card .meta {
             color: #666;
             font-size: 0.9rem;
             margin-bottom: 1rem;
         }
 
         .paper-card .actions {
             display: flex;
             gap: 1rem;
         }
 
         .year-section {
             margin-bottom: 3rem;
         }
 
         .year-section h2 {
             color: var(--text-color);
             margin-bottom: 1.5rem;
             padding-bottom: 0.5rem;
             border-bottom: 2px solid var(--border-color);
         }
     </style>
 </head>
 <body>
     <!-- START: Header Section -->
     <header id="main-header">
         <div class="container">
             <h1>Computer Application II</h1>
             <h2>Past Papers Collection</h2>
             <div class="exam-details">
                 <p>Paper Code: 2920/202A</p>
                 <p>Module II</p>
             </div>
         </div>
     </header>
     <!-- END: Header Section -->
 
     <div class="container main-content">
         <!-- START: Sidebar Placeholder -->
         <!-- Sidebar will be injected here -->
         <!-- END: Sidebar Placeholder -->
 
         <!-- START: Main Content Section -->
         <main id="main-content-area">
             <!-- START: Intro Section -->
             <section class="intro" id="intro-section">
                 <h2>Past Papers with Detailed Solutions</h2>
                 <p>A comprehensive collection of KNEC Computer Application II past papers from 2013 to 2023, complete with detailed answers and explanations.</p>
             </section>
             <!-- END: Intro Section -->
 
             <!-- START: Year 2023 Section -->
             <section class="year-section" id="year-2023">
                 <h2>2023</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2023 July -->
                     <div class="paper-card" id="paper-2023-july">
                         <h3>July 2023</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: CAD, GIS, AI, Accounting</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2023-july.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2023 July -->
                 </div>
             </section>
             <!-- END: Year 2023 Section -->
 
             <!-- START: Year 2022 Section -->
             <section class="year-section" id="year-2022">
                 <h2>2022</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2022 Nov -->
                     <div class="paper-card" id="paper-2022-nov">
                         <h3>November 2022</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: AI, GIS, Financial Systems</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2022-nov.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2022 Nov -->
                     <!-- START: Paper Card 2022 July -->
                     <div class="paper-card" id="paper-2022-july">
                         <h3>July 2022</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: CAD, Database Systems, AI</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2022-july.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2022 July -->
                 </div>
             </section>
             <!-- END: Year 2022 Section -->
 
             <!-- START: Year 2021 Section -->
             <section class="year-section" id="year-2021">
                 <h2>2021</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2021 Nov -->
                     <div class="paper-card" id="paper-2021-nov">
                         <h3>November 2021</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: CAD, GIS, Financial Systems</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2021-nov.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2021 Nov -->
                 </div>
             </section>
             <!-- END: Year 2021 Section -->
 
             <!-- START: Year 2019 Section -->
             <section class="year-section" id="year-2019">
                 <h2>2019</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2019 July -->
                     <div class="paper-card" id="paper-2019-july">
                         <h3>July 2019</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: CAD, AI, Accounting</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2019-july.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2019 July -->
                 </div>
             </section>
             <!-- END: Year 2019 Section -->
 
             <!-- START: Year 2018 Section -->
             <section class="year-section" id="year-2018">
                 <h2>2018</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2018 Nov -->
                     <div class="paper-card" id="paper-2018-nov">
                         <h3>November 2018</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: CAD, GIS, AI</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2018-nov.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2018 Nov -->
                     <!-- START: Paper Card 2018 July -->
                     <div class="paper-card" id="paper-2018-july">
                         <h3>July 2018</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: AI, Financial Systems</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2018-july.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2018 July -->
                 </div>
             </section>
             <!-- END: Year 2018 Section -->
 
             <!-- START: Year 2017 Section -->
             <section class="year-section" id="year-2017">
                 <h2>2017</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2017 Nov -->
                     <div class="paper-card" id="paper-2017-nov">
                         <h3>November 2017</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: CAD, AI, GIS</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2017-nov.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2017 Nov -->
                     <!-- START: Paper Card 2017 July -->
                     <div class="paper-card" id="paper-2017-july">
                         <h3>July 2017</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: Financial Systems, AI</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2017-july.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2017 July -->
                 </div>
             </section>
             <!-- END: Year 2017 Section -->
 
             <!-- START: Year 2016 Section -->
             <section class="year-section" id="year-2016">
                 <h2>2016</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2016 Nov -->
                     <div class="paper-card" id="paper-2016-nov">
                         <h3>November 2016</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: CAD, GIS, Accounting</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2016-nov.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2016 Nov -->
                     <!-- START: Paper Card 2016 July -->
                     <div class="paper-card" id="paper-2016-july">
                         <h3>July 2016</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: AI, CAD, Financial Systems</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2016-july.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2016 July -->
                 </div>
             </section>
             <!-- END: Year 2016 Section -->
 
             <!-- START: Year 2015 Section -->
             <section class="year-section" id="year-2015">
                 <h2>2015</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2015 Nov -->
                     <div class="paper-card" id="paper-2015-nov">
                         <h3>November 2015</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: CAD, GIS, AI</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2015-nov.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2015 Nov -->
                     <!-- START: Paper Card 2015 July -->
                     <div class="paper-card" id="paper-2015-july">
                         <h3>July 2015</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: AI, Financial Systems</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2015-july.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2015 July -->
                 </div>
             </section>
             <!-- END: Year 2015 Section -->
 
             <!-- START: Year 2014 Section -->
             <section class="year-section" id="year-2014">
                 <h2>2014</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2014 Nov -->
                     <div class="paper-card" id="paper-2014-nov">
                         <h3>November 2014</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: CAD, GIS, AI</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2014-nov.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2014 Nov -->
                 </div>
             </section>
             <!-- END: Year 2014 Section -->
 
             <!-- START: Year 2013 Section -->
             <section class="year-section" id="year-2013">
                 <h2>2013</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2013 Nov -->
                     <div class="paper-card" id="paper-2013-nov">
                         <h3>November 2013</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: CAD, AI, Financial Systems</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2013-nov.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2013 Nov -->
                     <!-- START: Paper Card 2013 July -->
                     <div class="paper-card" id="paper-2013-july">
                         <h3>July 2013</h3>
                         <div class="meta">
                             <p>Questions: 6 | Duration: 2 hours</p>
                             <p>Topics: AI, GIS, Accounting</p>
                         </div>
                         <div class="actions">
                             <a href="paper-2013-july.html" class="btn">View Paper</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2013 July -->
                 </div>
             </section>
             <!-- END: Year 2013 Section -->
         </main>
         <!-- END: Main Content Section -->
     </div>
 
     <!-- START: Footer Section -->
     <footer id="main-footer">
         <div class="container">
             <p>&copy; 2025 Computer Application II Past Papers Collection | Kenya National Examinations Council</p>
         </div>
     </footer>
     <!-- END: Footer Section -->
 </body>
 </html>

. example-pastpaper.html
 Content:
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>[Paper Name] - [Month Year] | KNEC Diploma</title> <!-- Updated Placeholder -->
     <link rel="stylesheet" href="styles.css">
     <script src="js/sidebar-navigation.js" defer></script>
     <!-- MathJax Configuration -->
     <script>
         MathJax = {
           tex: {
             inlineMath: [['$', '$'], ['\\(', '\\)']],
             displayMath: [['$$', '$$'], ['\\[', '\\]']],
             processEscapes: true,
             processEnvironments: true
           },
           options: {
             skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre']
           }
         };
     </script>
     <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js" id="MathJax-script" async></script>
 </head>
 <body>
     <!-- START: Header Section -->
     <header id="main-header">
         <div class="container">
             <h1>PLACEHOLDER SUBJECT</h1> <!-- Generic Header -->
             <h2>PLACEHOLDER PAPER (e.g., Nov 2025)</h2> <!-- Generic Sub-Header -->
             <div class="exam-details"> <!-- Generic Exam Details -->
                 <p>Paper Code: PLACEHOLDER</p>
                 <p>Duration: PLACEHOLDER</p>
                 <p>Module: PLACEHOLDER</p>
             </div>
         </div>
     </header>
     <!-- END: Header Section -->
 
     <div class="container main-content">
         <!-- START: Sidebar Section (Placeholder Structure) -->
         <div class="sidebar" id="main-sidebar">
             <div class="sidebar-header"><h3>Past Papers</h3></div>
             <nav class="sidebar-nav">
                 <ul>
                     <li>
                         <h4>Year 1</h4>
                         <ul>
                             <li><a href="#">Paper 1.1</a></li>
                             <li><a href="#">Paper 1.2</a></li>
                         </ul>
                     </li>
                     <li>
                         <h4>Year 2</h4>
                         <ul>
                             <li><a href="#">Paper 2.1</a></li>
                         </ul>
                     </li>
                     <!-- Add more years/papers as needed -->
                 </ul>
             </nav>
         </div>
         <!-- END: Sidebar Section -->
 
         <!-- START: Main Content Section -->
         <main id="main-content-area">
             <!-- START: Paper Navigation Top (Placeholder) -->
             <div class="paper-navigation top" id="nav-top">
                 <a href="index.html" class="btn">Home</a>
                 <a href="#" class="btn">Previous Paper</a>
                 <a href="#" class="btn">Next Paper</a>
             </div>
             <!-- END: Paper Navigation Top -->
 
             <!-- START: Paper Intro Section (Placeholder) -->
             <section class="paper-intro" id="paper-intro">
                 <h2>EXAMINATIONS COUNCIL NAME</h2>
                 <h3>QUALIFICATION NAME</h3>
                 <h4>MODULE/LEVEL NAME</h4>
                 <h4>SUBJECT NAME</h4>
                 <div class="instructions">
                     <h4>INSTRUCTIONS TO CANDIDATES</h4>
                     <p>Generic instruction 1.</p>
                     <p>Generic instruction 2.</p>
                     <p>Generic instruction 3.</p>
                 </div>
             </section>
             <!-- END: Paper Intro Section -->
 
             <!-- START: Paper Content Section (Placeholder with Example Question) -->
             <section class="paper-content" id="paper-content-area">
                 <!-- Question 1 -->
                 <div class="question" id="question-1">
                     <h3>Question 1 (20 marks)</h3>
                     <div class="question-content">
                         <p>(a) Example question part A. (10 marks)</p>
                         <p>(b) Example question part B. (10 marks)</p>
                         <p>   (i) Sub-part i. (5 marks)</p>
                         <p>   (ii) Sub-part ii. (5 marks)</p>
                     </div>
                     <div class="answer-section">
                         <h4>Answer</h4>
                         <div class="answer-content">
                             <p><em>Disclaimer: These answers are derived based on interpretation and may contain errors. Please verify independently.</em></p>
                             <p><strong>(a) Part Title A:</strong></p>
                             <p>Placeholder answer for part A.</p>
                             <p><strong>(b) Part Title B:</strong></p>
                             <p>(i) Placeholder answer for sub-part i.</p>
                             <p>(ii) Placeholder answer for sub-part ii.</p>
                         </div>
                     </div>
                 </div>
                 <!-- Add more question blocks as needed -->
             </section>
             <!-- END: Paper Content Section -->
 
             <!-- START: Paper Navigation Bottom (Placeholder) -->
             <div class="paper-navigation bottom" id="nav-bottom">
                 <a href="index.html" class="btn">Home</a>
                 <a href="#" class="btn">Previous Paper</a>
                 <a href="#" class="btn">Next Paper</a>
             </div>
             <!-- END: Paper Navigation Bottom -->
         </main>
         <!-- END: Main Content Section -->
     </div>
 
     <!-- START: Footer Section (Generic) -->
     <footer id="main-footer">
         <div class="container">
             <p>&copy; 2025 Subject Past Papers Collection | Organization Name</p>
         </div>
     </footer>
     <!-- END: Footer Section -->
 </body>
 </html>

. example_code.html
 Content:
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <title>Example Code Formatting</title>
     <link rel="stylesheet" href="styles.css"> <!-- Link to main styles for context -->
     <!-- Note: Add Prism.js or similar for syntax highlighting if desired -->
 </head>
 <body>
     <div class="container">
         <h1>Example Code Formatting</h1>
 
         <!-- START: Example Question with Code -->
         <div class="question" id="question-code-example">
             <h3>Question Example (Code)</h3>
             <div class="question-content">
                 <p>(a) Write a simple Python function to add two numbers. (5 marks)</p>
                 <p>(b) Show an example of an HTML paragraph tag. (5 marks)</p>
             </div>
             <div class="answer-section">
                 <h4>Answer</h4>
                 <div class="answer-content">
                     <p><strong>(a) Python Function:</strong></p>
                     <pre class="code-block"><code class="language-python">
 def add_numbers(num1, num2):
   """This function adds two numbers and returns the result."""
   return num1 + num2
 
 # Example usage:
 result = add_numbers(5, 3)
 print(result)  # Output: 8
                     </code></pre>
 
                     <p><strong>(b) HTML Paragraph Tag:</strong></p>
                     <pre class="code-block"><code class="language-html">
 <p>This is a paragraph of text in HTML.</p>
                     </code></pre>
                     <p>The <code><p></code> tag defines a paragraph.</p>
                 </div>
             </div>
         </div>
         <!-- END: Example Question with Code -->
 
     </div>
 </body>
 </html>

. example_diagram.html
 Content:
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <title>Example Diagram Formatting</title>
     <link rel="stylesheet" href="styles.css"> <!-- Link to main styles for context -->
 </head>
 <body>
     <div class="container">
         <h1>Example Diagram Formatting (ASCII)</h1>
 
         <!-- START: Example Question with Diagram -->
         <div class="question" id="question-diagram-example">
             <h3>Question Example (Diagram)</h3>
             <div class="question-content">
                 <p>(a) Draw a simple flowchart for making a cup of tea. (5 marks)</p>
                 <p>(b) Represent the following logic gate using standard symbols: AND gate with inputs A and B, output C. (5 marks)</p>
             </div>
             <div class="answer-section">
                 <h4>Answer</h4>
                 <div class="answer-content">
                     <p><strong>(a) Flowchart for Making Tea:</strong></p>
                     <pre class="diagram-code">
 +-----------+      +-----------------+      +---------------+
 | Start     |----->| Boil Water      |----->| Add Tea Bag   |
 +-----------+      +-----------------+      +---------------+
                                                |
                                                V
 +-----------+      +-----------------+      +---------------+
 | End       |<-----| Serve           |<-----| Add Milk/Sugar|
 +-----------+      +-----------------+      +---------------+
                     </pre>
                     <p class="diagram-caption">Figure 1: Simple Tea Making Flowchart</p>
 
                     <p><strong>(b) AND Gate Diagram:</strong></p>
                     <pre class="diagram-code">
   A ---+
        | AND Gate --> C = A . B
   B ---+
                     </pre>
                     <p class="diagram-caption">Figure 2: AND Logic Gate</p>
                 </div>
             </div>
         </div>
         <!-- END: Example Question with Diagram -->
 
     </div>
 </body>
 </html>

. example_equation.html
 Content:
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Equation Example</title>
     <link rel="stylesheet" href="styles.css"> <!-- Assuming shared styles -->
     <!-- MathJax Scripts -->
     <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
     <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
 </head>
 <body>
     <!-- START: Equation Section -->
     <div class="equation" id="equation-quadratic">
         \[x = \frac{-b \pm \sqrt{b^2-4ac}}{2a}\]
     </div>
     <!-- END: Equation Section -->
 </body>
 </html>

. example_figure.html
 Content:
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <title>Example Figure/Image Formatting</title>
     <link rel="stylesheet" href="styles.css"> <!-- Link to main styles for context -->
 </head>
 <body>
     <div class="container">
         <h1>Example Figure/Image Formatting</h1>
         <p>This example demonstrates how to include figures, especially those extracted from PDFs (e.g., via Mathpix MMD URLs) and stored locally.</p>
         <p><strong>Process Reminder (from instructions):</strong></p>
         <ol>
             <li>Find the image URL in the `.mmd` file.</li>
             <li>Ensure the `images/` directory exists (`mkdir -p images`).</li>
             <li>Download the image using `curl -o images/[image_name].jpg '[URL]'`.</li>
             <li>Use the structure below, replacing the `src` and `alt` attributes.</li>
         </ol>
 
         <!-- START: Example Question with Figure -->
         <div class="question" id="question-figure-example">
             <h3>Question Example (Figure)</h3>
             <div class="question-content">
                 <p>(a) Refer to Figure 1 below. Identify the component labeled 'X'. (5 marks)</p>
 
                 <!-- Use the figure element for semantic meaning -->
                 <figure class="question-figure">
                     <!-- Reference the locally downloaded image -->
                     <img src="images/example_figure_1.jpg"
                          alt="Example diagram showing interconnected components with component X highlighted"
                          style="max-width: 80%; height: auto; border: 1px solid #ccc;"> <!-- Example styling -->
                     <figcaption>Figure 1: Example System Diagram</figcaption>
                 </figure>
 
                 <p>(b) Explain the function of component 'X'. (5 marks)</p>
             </div>
             <div class="answer-section">
                 <h4>Answer</h4>
                 <div class="answer-content">
                     <p><strong>(a) Identification of Component 'X':</strong></p>
                     <p>Component 'X' in Figure 1 is the [Placeholder Component Name, e.g., Central Processing Unit].</p>
 
                     <p><strong>(b) Function of Component 'X':</strong></p>
                     <p>The function of the [Placeholder Component Name] is to [Placeholder Function Description, e.g., execute instructions and perform calculations].</p>
                 </div>
             </div>
         </div>
         <!-- END: Example Question with Figure -->
 
     </div>
 </body>
 </html>

. example_math.html
 Content:
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <title>Example Math Formatting</title>
     <link rel="stylesheet" href="styles.css"> <!-- Link to main styles for context -->
     <!-- MathJax Configuration -->
     <script>
         MathJax = {
           tex: {
             inlineMath: [['$', '$'], ['\\(', '\\)']],
             displayMath: [['$$', '$$'], ['\\[', '\\]']],
             processEscapes: true,
             processEnvironments: true
           },
           options: {
             skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre']
           }
         };
     </script>
     <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js" id="MathJax-script" async></script>
 </head>
 <body>
     <div class="container">
         <h1>Example Math Formatting</h1>
 
         <!-- START: Example Question with Math -->
         <div class="question" id="question-math-example">
             <h3>Question Example (Math)</h3>
             <div class="question-content">
                 <p>(a) Solve the quadratic equation $ax^2 + bx + c = 0$ using the quadratic formula. (5 marks)</p>
                 <p>(b) Given the matrix $A = \begin{bmatrix} 1 & 2 \\ 3 & 4 \end{bmatrix}$, find its determinant. (5 marks)</p>
             </div>
             <div class="answer-section">
                 <h4>Answer</h4>
                 <div class="answer-content">
                     <p><strong>(a) Quadratic Formula:</strong></p>
                     <p>The solution to $ax^2 + bx + c = 0$ is given by the quadratic formula:</p>
                     $$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$
                     <p>This formula provides the roots of the quadratic equation.</p>
 
                     <p><strong>(b) Determinant of Matrix A:</strong></p>
                     <p>For a 2x2 matrix $A = \begin{bmatrix} a & b \\ c & d \end{bmatrix}$, the determinant is calculated as $|A| = ad - bc$.</p>
                     <p>In this case, $A = \begin{bmatrix} 1 & 2 \\ 3 & 4 \end{bmatrix}$, so:</p>
                     <p>$|A| = (1)(4) - (2)(3) = 4 - 6 = -2$.</p>
                     <p>The determinant is $-2$.</p>
                 </div>
             </div>
         </div>
         <!-- END: Example Question with Math -->
 
     </div>
 </body>
 </html>

. example_question.html
 Content:
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <title>Example Question Structure</title>
     <link rel="stylesheet" href="styles.css"> <!-- Link to main styles for context -->
 </head>
 <body>
     <div class="container">
         <h1>Example Question Structure</h1>
 
         <!-- START: Example Question -->
         <div class="question" id="question-example">
             <h3>Question X (20 marks)</h3>
             <div class="question-content">
                 <p>(a) This is the first part of the example question. (8 marks)</p>
                 <p>(b) This is the second part, which might have sub-parts:</p>
                 <p>   (i) Sub-part one. (6 marks)</p>
                 <p>   (ii) Sub-part two. (6 marks)</p>
             </div>
             <div class="answer-section">
                 <h4>Answer</h4>
                 <div class="answer-content">
                     <p><em>Disclaimer: These answers are derived based on interpretation and may contain errors. Please verify independently.</em></p>
                     <p><strong>(a) Answer to Part A:</strong></p>
                     <p>This is a placeholder answer for part (a).</p>
 
                     <p><strong>(b) Answer to Part B:</strong></p>
                     <p>(i) This is a placeholder answer for sub-part (i).</p>
                     <p>(ii) This is a placeholder answer for sub-part (ii).</p>
                 </div>
             </div>
         </div>
         <!-- END: Example Question -->
 
     </div>
 </body>
 </html>

. example_table.html
 Content:
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <title>Example Table Formatting</title>
     <link rel="stylesheet" href="styles.css"> <!-- Link to main styles for context -->
 </head>
 <body>
     <div class="container">
         <h1>Example Table Formatting</h1>
 
         <!-- START: Example Question with Table -->
         <div class="question" id="question-table-example">
             <h3>Question Example (Table)</h3>
             <div class="question-content">
                 <p>(a) Table 1 shows sales data for different regions. Analyze the data. (10 marks)</p>
                 <table class="data-table">
                     <caption>Table 1: Regional Sales Data</caption>
                     <thead>
                         <tr><th>Region</th><th>Sales (Units)</th><th>Revenue ($)</th></tr>
                     </thead>
                     <tbody>
                         <tr><td>North</td><td>1500</td><td>$30,000</td></tr>
                         <tr><td>South</td><td>1200</td><td>$24,000</td></tr>
                         <tr><td>East</td><td>1800</td><td>$36,000</td></tr>
                         <tr><td>West</td><td>1350</td><td>$27,000</td></tr>
                     </tbody>
                 </table>
             </div>
             <div class="answer-section">
                 <h4>Answer</h4>
                 <div class="answer-content">
                     <p><strong>(a) Sales Data Analysis:</strong></p>
                     <p>The table shows the following:</p>
                     <ul>
                         <li>The East region had the highest sales volume (1800 units) and revenue ($36,000).</li>
                         <li>The South region had the lowest sales volume (1200 units) and revenue ($24,000).</li>
                         <li>The average revenue per unit appears consistent across regions ($20/unit).</li>
                     </ul>
                     <p>Further analysis could involve comparing these figures to previous periods or targets.</p>
                 </div>
             </div>
         </div>
         <!-- END: Example Question with Table -->
 
     </div>
 </body>
 </html>

. html_implementation_status.md
 Content:
 # HTML Implementation Status
 
 This document tracks the status of HTML implementations for past papers and provides optimization guidelines for sidebar/navigation updates.
 
 ## Implementation Status
 
 ### Completed HTML Implementations
 1. 2011j.html - July 2011
 2. 2013n.html - November 2013
 3. 2014july.html - July 2014
 4. 2014julya.html - July 2014 (Alternative)
 5. 2016nov.html - November 2016
 6. 2017july.html - July 2017
 7. 2017nov.html - November 2017
 
 ### Pending HTML Implementations
 1. 2014nov.pdf (Has MMD file)
 2. 2015nov.pdf (Has MMD file)
 3. 2018j.pdf
 4. 2018n.pdf
 5. 2019july.pdf
 6. 2021j.pdf
 7. 2021n.pdf
 8. 2022j.pdf
 
 ## Optimization Guidelines
 
 ### Sidebar Updates
 1. Each new paper should be added to the appropriate year section in the sidebar
 2. If year section doesn't exist, create new year section following existing structure
 3. Keep papers organized in reverse chronological order by year
 4. Within each year, list papers in chronological order (July before November)
 
 ### Navigation Links
 1. Add paper card in main content area under appropriate year section
 2. Include standard metadata (Tasks count, Duration)
 3. Use consistent file naming convention: 
    - July papers: YYYY + "july" (e.g., 2017july.html)
    - November papers: YYYY + "nov" (e.g., 2016nov.html)
 
 ### Implementation Steps
 1. Convert PDF to HTML following example templates in /examples/
 2. Add images to /images/ directory following naming convention: YYYYx_figN.jpg
 3. Update index.html:
    - Add sidebar entry
    - Add paper card
 4. Test all navigation links
 5. Update this status document
 
 ### Best Practices
 1. Always check this document first to avoid duplicate work
 2. Follow existing HTML structure and styling
 3. Keep consistent indentation and formatting
 4. Use comments to mark sections
 5. Test navigation links after any updates

. index.html
 Content:
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Computational Mathematics - Past Papers</title> <!-- Updated Title -->
     <link rel="stylesheet" href="styles.css">
     <script src="js/sidebar-navigation.js" defer></script>
     <!-- Assuming sidebar is embedded or handled differently now -->
 </head>
 <body>
     <!-- START: Header Section -->
     <header id="main-header">
         <div class="container">
             <h1>Computational Mathematics</h1> <!-- Updated Header -->
             <h2>Past Papers Collection</h2>
             <div class="exam-details">
                 <p>Module: Module I</p> <!-- Updated Details -->
                 <p>Qualification: Diploma in ICT</p>
             </div>
         </div>
     </header>
     <!-- END: Header Section -->
 
     <div class="container main-content">
         <!-- START: Sidebar Section -->
         <div class="sidebar" id="main-sidebar"> <!-- Generic Sidebar Placeholder -->
             <div class="sidebar-header"><h3>Navigation</h3></div>
             <nav class="sidebar-nav">
                 <ul>
                     <li>
                         <h4>Category 1</h4>
                         <ul>
                             <li><a href="#">Item 1.1</a></li>
                             <li><a href="#">Item 1.2</a></li>
                         </ul>
                     </li>
                     <li>
                         <h4>Category 2</h4>
                         <ul>
                             <li><a href="#">Item 2.1</a></li>
                         </ul>
                     </li>
                     <!-- Add more categories and items as needed -->
                 </ul>
             </nav>
         </div>
         <!-- END: Sidebar Section -->
 
         <!-- START: Main Content Section -->
         <main id="main-content-area">
             <!-- START: Intro Section -->
             <section class="intro" id="intro-section">
                 <h2>Past Papers</h2>
                 <p>A collection of KNEC Computational Mathematics past papers for the Diploma in ICT.</p>
             </section>
             <!-- END: Intro Section -->
 
             <!-- START: Year 2022 Section -->
             <section class="year-section" id="year-2022">
                 <h2>2022</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2022 July -->
                     <div class="paper-card" id="paper-2022-july">
                         <h3>July 2022</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2022j.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2022 July -->
                 </div>
             </section>
             <!-- END: Year 2022 Section -->
 
             <!-- START: Year 2021 Section -->
             <section class="year-section" id="year-2021">
                 <h2>2021</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2021 Nov -->
                     <div class="paper-card" id="paper-2021-nov">
                         <h3>November 2021</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2021n.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2021 Nov -->
                 </div>
             </section>
             <!-- END: Year 2021 Section -->
 
             <!-- START: Year 2019 Section -->
             <section class="year-section" id="year-2019">
                 <h2>2019</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2019 July -->
                     <div class="paper-card" id="paper-2019-july">
                         <h3>July 2019</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2019july.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2019 July -->
                 </div>
             </section>
             <!-- END: Year 2019 Section -->
 
             <!-- START: Year 2018 Section -->
             <section class="year-section" id="year-2018">
                 <h2>2018</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2018 July -->
                     <div class="paper-card" id="paper-2018-july"> <!-- Assuming 2018j.html exists -->
                         <h3>July 2018</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2018j.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2018 July -->
                 </div>
             </section>
             <!-- END: Year 2018 Section -->
 
             <!-- START: Year 2017 Section -->
             <section class="year-section" id="year-2017">
                 <h2>2017</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2017 Nov -->
                     <div class="paper-card" id="paper-2017-nov">
                         <h3>November 2017</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2017nov.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2017 Nov -->
                     <!-- START: Paper Card 2017 July -->
                     <div class="paper-card" id="paper-2017-july">
                         <h3>July 2017</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2017july.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2017 July -->
                 </div>
             </section>
             <!-- END: Year 2017 Section -->
 
             <!-- START: Year 2016 Section -->
             <section class="year-section" id="year-2016">
                 <h2>2016</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2016 Nov -->
                     <div class="paper-card" id="paper-2016-nov">
                         <h3>November 2016</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2016nov.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2016 Nov -->
                     <!-- START: Paper Card 2016 July -->
                     <div class="paper-card" id="paper-2016-july"> <!-- Assuming 2016july.html exists -->
                         <h3>July 2016</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2016july.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2016 July -->
                 </div>
             </section>
             <!-- END: Year 2016 Section -->
 
             <!-- START: Year 2015 Section -->
             <section class="year-section" id="year-2015">
                 <h2>2015</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2015 Nov -->
                     <div class="paper-card" id="paper-2015-nov">
                         <h3>November 2015</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2015nov.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2015 Nov -->
                 </div>
             </section>
             <!-- END: Year 2015 Section -->
 
             <!-- START: Year 2014 Section -->
             <section class="year-section" id="year-2014">
                 <h2>2014</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2014 Nov -->
                     <div class="paper-card" id="paper-2014-nov">
                         <h3>November 2014</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2014n.html" class="btn">View Online</a> <!-- Corrected link -->
                         </div>
                     </div>
                     <!-- END: Paper Card 2014 Nov -->
                     <!-- START: Paper Card 2014 July -->
                     <div class="paper-card" id="paper-2014-july">
                         <h3>July 2014</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2014july.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2014 July -->
                 </div>
             </section>
             <!-- END: Year 2014 Section -->
 
             <!-- START: Year 2013 Section -->
             <section class="year-section" id="year-2013">
                 <h2>2013</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2013 Nov -->
                     <div class="paper-card" id="paper-2013-nov">
                         <h3>November 2013</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2013nov.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2013 Nov -->
                 </div>
             </section>
             <!-- END: Year 2013 Section -->
 
             <!-- START: Year 2012 Section -->
             <section class="year-section" id="year-2012">
                 <h2>2012</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2012 July -->
                     <div class="paper-card" id="paper-2012-july"> <!-- Assuming 2012july.html exists -->
                         <h3>July 2012</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2012july.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2012 July -->
                 </div>
             </section>
             <!-- END: Year 2012 Section -->
 
             <!-- START: Year 2011 Section -->
             <section class="year-section" id="year-2011">
                 <h2>2011</h2>
                 <div class="paper-grid">
                     <!-- START: Paper Card 2011 Nov -->
                     <div class="paper-card" id="paper-2011-nov"> <!-- Assuming 2011n.html exists -->
                         <h3>November 2011</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2011n.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2011 Nov -->
                     <!-- START: Paper Card 2011 July -->
                     <div class="paper-card" id="paper-2011-july"> <!-- Assuming 2011july.html exists -->
                         <h3>July 2011</h3>
                         <div class="meta">
                             <p>Questions: 8 | Duration: 2½ hours</p>
                         </div>
                         <div class="actions">
                             <a href="2011july.html" class="btn">View Online</a>
                         </div>
                     </div>
                     <!-- END: Paper Card 2011 July -->
                 </div>
             </section>
             <!-- END: Year 2011 Section -->
         </main>
         <!-- END: Main Content Section -->
     </div>
 
     <!-- START: Footer Section -->
     <footer id="main-footer">
         <div class="container">
             <p>&copy; 2025 Computational Mathematics Past Papers | KNEC Diploma in ICT</p> <!-- Updated Footer -->
         </div>
     </footer>
     <!-- END: Footer Section -->
 </body>
 </html>

. js/
 . answer-toggle.js
  Content:
  document.addEventListener('DOMContentLoaded', () => {
      // Initialize all answers as hidden
      const answers = document.querySelectorAll('.answer');
      answers.forEach(answer => {
          answer.style.display = 'none';
      });
  
      // Add toggle buttons to each question
      document.querySelectorAll('.question').forEach(question => {
          if (!question.querySelector('.answer')) return;
  
          const toggleBtn = document.createElement('button');
          toggleBtn.className = 'answer-toggle';
          toggleBtn.textContent = 'Show Answer';
          
          // Insert button after question content
          const questionContent = question.querySelector('.question-content');
          questionContent.after(toggleBtn);
  
          // Toggle answer visibility
          toggleBtn.addEventListener('click', () => {
              const answer = question.querySelector('.answer');
              const isHidden = answer.style.display === 'none';
              
              answer.style.display = isHidden ? 'block' : 'none';
              toggleBtn.textContent = isHidden ? 'Hide Answer' : 'Show Answer';
              
              if (isHidden) {
                  answer.style.opacity = '0';
                  answer.style.transform = 'translateY(-10px)';
                  
                  // Trigger reflow
                  answer.offsetHeight;
                  
                  // Add transition
                  answer.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                  answer.style.opacity = '1';
                  answer.style.transform = 'translateY(0)';
              }
          });
      });
  
      // Add "Show All" and "Hide All" buttons if there are answers
      const questionsWithAnswers = document.querySelectorAll('.question .answer');
      if (questionsWithAnswers.length > 0) {
          const controls = document.createElement('div');
          controls.className = 'answer-controls';
          controls.style.marginBottom = '2rem';
          
          const showAllBtn = document.createElement('button');
          showAllBtn.className = 'answer-toggle';
          showAllBtn.textContent = 'Show All Answers';
          showAllBtn.style.marginRight = '1rem';
          
          const hideAllBtn = document.createElement('button');
          hideAllBtn.className = 'answer-toggle';
          hideAllBtn.textContent = 'Hide All Answers';
          
          controls.appendChild(showAllBtn);
          controls.appendChild(hideAllBtn);
          
          // Insert controls before the first question
          const firstQuestion = document.querySelector('.question');
          firstQuestion.parentNode.insertBefore(controls, firstQuestion);
          
          // Show all answers
          showAllBtn.addEventListener('click', () => {
              document.querySelectorAll('.answer').forEach(answer => {
                  answer.style.display = 'block';
                  answer.style.opacity = '1';
                  answer.style.transform = 'translateY(0)';
              });
              document.querySelectorAll('.answer-toggle:not(:first-child)').forEach(btn => {
                  btn.textContent = 'Hide Answer';
              });
          });
          
          // Hide all answers
          hideAllBtn.addEventListener('click', () => {
              document.querySelectorAll('.answer').forEach(answer => {
                  answer.style.display = 'none';
              });
              document.querySelectorAll('.answer-toggle:not(:first-child)').forEach(btn => {
                  btn.textContent = 'Show Answer';
              });
          });
      }
  });

 . sidebar-include.js
  Content:
  document.addEventListener('DOMContentLoaded', function() {
      // Find the comment indicating where to inject the sidebar
      const mainContent = document.querySelector('.main-content');
      if (mainContent) {
          fetch('components/sidebar.html')
              .then(response => {
                  if (!response.ok) {
                      throw new Error(`HTTP error! status: ${response.status}`);
                  }
                  return response.text();
              })
              .then(html => {
                  // Insert the sidebar before the main element
                  const main = mainContent.querySelector('main');
                  if (main) {
                      const parser = new DOMParser();
                      const doc = parser.parseFromString(html, 'text/html');
                      const sidebar = doc.querySelector('.sidebar');
                      if (sidebar) {
                          console.log('Sidebar element found:', sidebar);
                          console.log('Main content element:', mainContent);
                          console.log('Main element:', main);
                          mainContent.insertBefore(sidebar, main);
                          console.log('Sidebar inserted');
                      } else {
                          console.error('Sidebar element not found in template');
                      }
                  }
              })
              .catch(error => {
                  console.error('Error loading sidebar:', error);
              });
      }
  });

 . sidebar-navigation.js
  Content:
  document.addEventListener('DOMContentLoaded', function() {
      // Get current page path
      const currentPath = window.location.pathname;
      const filename = currentPath.split('/').pop();
      
      // Function to set active link
      function setActiveLink() {
          const sidebarLinks = document.querySelectorAll('.sidebar-nav a');
          sidebarLinks.forEach(link => {
              if (link.getAttribute('href') === filename) {
                  link.classList.add('active');
                  // Ensure parent lists are visible
                  let parentLi = link.closest('li');
                  while (parentLi) {
                      if (parentLi.querySelector('ul')) {
                          parentLi.classList.add('expanded');
                      }
                      parentLi = parentLi.parentElement.closest('li');
                  }
              }
          });
      }
  
      // Add scroll to top functionality
      window.onscroll = function() {
          if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
              document.querySelector('.scroll-to-top')?.classList.add('visible');
          } else {
              document.querySelector('.scroll-to-top')?.classList.remove('visible');
          }
      };
  
      // Wait for sidebar to be injected then set active link
      const observer = new MutationObserver(function(mutations) {
          mutations.forEach(function(mutation) {
              if (mutation.addedNodes.length) {
                  const sidebar = document.querySelector('.sidebar');
                  if (sidebar) {
                      setActiveLink();
                      observer.disconnect();
                  }
              }
          });
      });
  
      observer.observe(document.querySelector('.main-content'), {
          childList: true,
          subtree: true
      });
  });

. missing_papers_report.md
 Content:
 # Missing Past Papers List
 
 This report lists the KNEC Craft Certificate Basic Electronics past papers (July/November sessions, unless otherwise noted) that are currently missing from the HTML collection based on the files present in the root directory.
 
 ## 2022
 - July (PDF exists, HTML missing)
 - November
 
 ## 2020
 - July
 - November
 
 ## 2019
 - November
 
 ## 2018
 - November
 
 ## 2014
 - November
 
 ## 2013
 - July

. pdf_to_html_instructions.md
 Content:
 **Note:** This guide is a living document. When updating the conversion process or adding new tools/steps, **append** or **modify** the relevant sections. Do **not** overwrite the entire file unless starting completely fresh.
 
 # PDF to HTML Conversion Guide: KNEC Past Papers
 
 ## 1. Introduction
 
 This guide details the standardized process for converting KNEC Diploma past examination paper PDFs into accessible, well-structured HTML format. Following these steps ensures consistency across all papers, facilitating easier navigation, maintenance, and use with assistive technologies.
 
 **Goals:**
 *   Standardized HTML structure using semantic elements.
 *   Consistent formatting for questions, answers, tables, figures, and code.
 *   Accurate mathematical notation rendering via MathJax.
 *   Functional navigation (sidebar, previous/next paper links).
 *   Automated verification for quality assurance.
 
 **Workflow Overview:**
 1.  **Setup:** Prepare the environment and conversion plan.
 2.  **Conversion:** Process each PDF through MMD conversion, HTML templating, content population, and linking.
 3.  **Verification:** Run automated checks to validate structure, links, and formatting.
 4.  **Indexing:** Update the main index page.
 5.  **Review:** Perform final manual checks.
 
 ---
 
 ## 2. Initial Setup
 
 Before starting conversions, ensure the following are in place:
 
 1.  **Directory Structure:** The project should have the main directory containing the HTML/PDF/MMD files, and subdirectories:
     *   `images/`: For storing downloaded figures.
     *   `js/`: Containing `sidebar-navigation.js`.
     *   `examples/`: Containing this guide, verification scripts (`verify_pastpapers.py`, `setup_chromedriver.py`), dependencies (`requirements.txt`), and example HTML snippets.
 2.  **Core Files:**
     *   `styles.css`: The main stylesheet (copy from `examples/` if missing).
     *   `js/sidebar-navigation.js`: Sidebar functionality script (copy from `examples/js/` if missing).
     *   `index.html`: The main index page (create if missing, update after each paper conversion - see Step 11).
 3.  **Verification Tools Setup:**
     *   Install Python dependencies:
         ```bash
         # Run from the main project directory
         pip install -r examples/requirements.txt
         ```
     *   Configure ChromeDriver (if needed, usually handled automatically by Selenium Manager now):
         ```bash
         # Run from the main project directory
         python3 examples/setup_chromedriver.py
         ```
 4.  **Conversion Plan (`conversion_plan.txt`):**
     *   Create this file in the main project directory if it doesn't exist.
     *   List all target PDFs.
     *   Use the template below to track progress for *each* PDF.
     *   **Crucially, update the plan after completing *every* step.**
 
 ---
 
 ## 3. Using the Conversion Plan (`conversion_plan.txt`)
 
 The `conversion_plan.txt` file is essential for tracking progress.
 
 *   **Structure:** Maintain sections for Target PDFs, Setup Tasks, Standard Steps template, and Conversion Status for each paper.
 *   **Tracking:** Use `[ ]` (Pending), `[X]` (Completed), `[S]` (Skipped), `[N/A]` (Not Applicable) for each step. Add notes for failures or specifics.
 *   **Status:** Update the overall status for each paper (`PENDING`, `IN PROGRESS`, `COMPLETED`, `FAILED`).
 *   **Mandatory Answers:** Step 4b (Add Answers) *must* be marked `[X]` before a paper is considered `COMPLETED`.
 
 ### Standard Steps Template (for `conversion_plan.txt`)
 
 ```
 **X. [Input PDF Filename] -> [Output HTML Filename]**
 - [ ] Step 1: PDF to MMD Conversion ([Output MMD Filename])
 - [ ] Step 2: Create Clean HTML Template ([Output HTML Filename])
 - [ ] Step 3: Update Header
 - [ ] Step 4: Populate Main Content (Instructions & Questions)
     - [ ] Step 4.1: Download Figures/Images (if any)
 - [ ] Step 4b: Add Answers (Mandatory)
 - [ ] Step 5: Embed Sidebar
 - [ ] Step 6: Update Navigation Links
 - [ ] Step 7: Verify Links (Cross-check all existing HTML files)
 - [ ] Step 8: Format Special Content (if not handled in Step 4/4b)
 - [ ] Step 9: Run Automated Verification
 - [ ] Step 10: Final Review & Browser Test
 - [ ] Step 11: Update/Create index.html
 
 **Status: [PENDING | IN PROGRESS | COMPLETED | FAILED]**
 ```
 
 ---
 
 ## 4. Conversion Steps (Per Paper)
 
 Follow these steps sequentially for each PDF listed in the conversion plan.
 
 ### Step 1: PDF to MMD Conversion
 
 Convert the source PDF to Markdown (MMD).
 *   **Primary Tool:** Mathpix OCR (`node ...` command via `execute_command`).
 
 *   **Command (Run from project root):**
     ```bash
     node /home/ngobiro/.local/share/Roo-Code/MCP/mathpix-ocr-server/build/index.js [input_pdf_filename].pdf > [output_mmd_filename].mmd
     ```
 *   **Example:**
     ```bash
     node /home/ngobiro/.local/share/Roo-Code/MCP/mathpix-ocr-server/build/index.js 2012n.pdf > 2012n.mmd
     ```
 *   **Check for Images:** Review the generated `.mmd` file for `![](image_url)` links. These need to be downloaded in Step 4.1.
 *   **Update Plan:** Mark Step 1 complete in `conversion_plan.txt`.
 
 ### Step 2: Create Clean HTML Template
 
 Create the initial HTML file (e.g., `2012n.html`) using the standard template.
 *   **Primary Tools:** `execute_command` (with `cp`) or `write_to_file`.
 
 *   **Action:** Copy `examples/template_paper.html` to the root directory and rename it (e.g., `cp examples/template_paper.html ./2012n.html`). Alternatively, use `write_to_file` with the content from the template.
 *   **Update Plan:** Mark Step 2 complete.
 
 **(Template Content Reference - Do not copy this block directly for the file):**
 ```html
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>[Paper Name] - [Month Year] | KNEC Diploma</title> <!-- Update in Step 3 -->
     <link rel="stylesheet" href="styles.css">
     <script src="js/sidebar-navigation.js" defer></script>
     <!-- MathJax Configuration -->
     <script>
         MathJax = {
           tex: { inlineMath: [['$', '$'], ['\\(', '\\)']], displayMath: [['$$', '$$'], ['\\[', '\\]']], processEscapes: true, processEnvironments: true },
           options: { skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre'] }
         };
     </script>
     <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js" id="MathJax-script" async></script>
 </head>
 <body>
     <header>
         <div class="container">
             <h1>PLACEHOLDER SUBJECT</h1> <!-- Update in Step 3 -->
             <h2>PLACEHOLDER PAPER</h2> <!-- Update in Step 3 -->
             <div class="exam-details">
                 <p>Paper Code: PLACEHOLDER</p> <!-- Update in Step 3 -->
                 <p>Duration: PLACEHOLDER</p> <!-- Update in Step 3 -->
                 <p>Module: PLACEHOLDER</p> <!-- Update in Step 3 -->
             </div>
         </div>
     </header>
 
     <main class="container">
         <div class="main-content">
             <!-- Sidebar (Step 5) -->
             <div class="sidebar">
                  <!-- Placeholder: Content added in Step 5 -->
             </div>
             <div class="content-wrapper">
                 <!-- Top Navigation (Step 6) -->
                 <div class="paper-navigation top" id="nav-top">
                      <!-- Placeholder: Content added in Step 6 -->
                 </div>
                 <!-- Main Content (Step 4 & 4b) -->
                 <section class="paper-intro">
                      <!-- Placeholder: Content added in Step 4 -->
                 </section>
                 <section class="paper-content">
                      <!-- Placeholder: Content added in Step 4 -->
                 </section>
                 <!-- Bottom Navigation (Step 6) -->
                 <div class="paper-navigation bottom" id="nav-bottom">
                      <!-- Placeholder: Content added in Step 6 -->
                 </div>
             </div>
         </div>
     </main>
 
     <footer>
         <div class="container">
             <p>&copy; 2025 Subject Past Papers Collection | Kenya National Examinations Council</p>
         </div>
     </footer>
 </body>
 </html>
 ```
 3.  **Generate HTML Content:**
     *   Use the basic HTML structure (similar to paper templates but without sidebar JS).
     *   Set the `<title>` appropriately (e.g., "KNEC Diploma Past Papers | Subject Name").
     *   Update the `<header>` content.
     *   Inside `<main class="container">`:
         *   For each year present in the sorted list:
             *   Create a `<section class="year-section" id="year-YYYY">`.
             *   Add `<h2>YYYY</h2>`.
             *   Create a `<div class="paper-grid">`.
             *   For each paper within that year:
                 *   Create a `<div class="paper-card">`.
                 *   Add `<h3><a href="[paper_filename].html">[Month Year]</a></h3>`.
                 *   Add `<p class="meta">Paper Code: [Code]</p>` (Extract from paper's header if possible, otherwise use placeholder).
                 *   Add `<div class="actions"><a href="[paper_filename].html" class="btn">View Paper</a></div>`. (Optionally add PDF link if PDF exists).
 4.  **Write `index.html`:** Use `write_to_file` with the generated content. Overwrite the existing `index.html` if it exists.
 5.  **Add to Conversion Plan:** Ensure "Update/Create index.html" is listed as a final step in the `conversion_plan.txt` template or as a separate task.
 
 Start with a standardized template:
 
 ```html
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>[Paper Name] - [Month Year] | KNEC Diploma</title>
     <link rel="stylesheet" href="styles.css">
     <script src="js/sidebar-navigation.js" defer></script>
     <!-- MathJax Configuration -->
     <script>
         MathJax = {
           tex: {
             inlineMath: [['$', '$'], ['\\(', '\\)']],
             displayMath: [['$$', '$$'], ['\\[', '\\]']],
             processEscapes: true,
             processEnvironments: true
           },
           options: {
             skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre']
           }
         };
     </script>
     <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js" id="MathJax-script" async></script>
 </head>
 <body>
     <header>
         <div class="container">
             <h1>PLACEHOLDER SUBJECT</h1>
             <h2>PLACEHOLDER PAPER</h2>
             <div class="exam-details">
                 <p>Paper Code: PLACEHOLDER</p>
                 <p>Duration: PLACEHOLDER</p>
                 <p>Module: PLACEHOLDER</p>
             </div>
         </div>
     </header>
 
     <div class="container main-content">
         <!-- Sidebar will be inserted here later -->
         <main>
             <!-- Paper navigation (top) will be inserted here later -->
             <!-- Paper intro section will be inserted here later -->
             <!-- Paper content (questions/answers) will be inserted here later -->
             <!-- Paper navigation (bottom) will be inserted here later -->
         </main>
     </div>
 
     <footer>
         <div class="container">
             <p>&copy; 2025 Subject Past Papers Collection | Kenya National Examinations Council</p>
         </div>
     </footer>
 </body>
 </html>
 ```
 
 ### Question Structure
 Each question should follow this consistent structure:
 ```html
 <!-- Question X -->
 <div class="question" id="question-X">
     <h3>Question X (20 marks)</h3>
     <div class="question-content">
         <!-- Question parts go here -->
         <p>(a) First part of the question (X marks)</p>
         <p>(b) Second part... etc</p>
     </div>
     <div class="answer-section">
         <h4>Answer</h4>
         <div class="answer-content">
             <!-- Answer content or placeholder -->
             <p><strong>(a) Part Title:</strong></p>
             <!-- Answer details -->
         </div>
     </div>
 </div>
 ```
 
 ### Important Guidelines
 
 1. **Consistent Structure**
    - Always include both question-content and answer-section divs
    - Use consistent indentation (4 spaces or 1 tab)
    - Keep proper div nesting
    - Include answer section placeholders even if empty
 
 2. **Mathematical Content**
    - Use `$...$` for inline math
    - Use `$$...$$` for display math
    - Tables with math content should use `$` in cells
 
 3. **Tables Structure**
 ```html
 <table class="data-table">
     <caption>Table X</caption>
     <thead>
         <tr><th>Column 1</th><th>Column 2</th></tr>
     </thead>
     <tbody>
         <tr><td>Data 1</td><td>Data 2</td></tr>
     </tbody>
 </table>
 ```
 
 4. **Diagrams**
 ```html
 <pre class="diagram-code">
     [ASCII art diagram here]
 </pre>
 <p class="diagram-caption">Figure X</p>
 ```
 
 5. **Lists**
 ```html
 <ol>
     <li>Ordered item</li>
 </ol>
 
 <ul>
     <li>Unordered item</li>
 </ul>
 ```
 
 ### Common Issues to Avoid
 
 1. **Extra Closing Tags**
    - Don't add extra `</div>` tags
    - Maintain proper nesting level
    - Check closing tags match opening tags
 
 2. **Spacing and Layout**
    - Use empty lines between major sections
    - Keep consistent indentation
    - Don't mix tabs and spaces
 
 3. **Content Structure**
    - Keep question parts organized with clear labels
    - Use appropriate heading levels
    - Maintain consistent marking scheme notation
 
 ### Examples
 
 See these example files for reference:
 - example_question.html - Basic question structure
 - example_math.html - Mathematical content formatting
 - example_table.html - Table formatting
 - example_diagram.html - Diagram formatting
 
 Note: Always validate the HTML structure before committing changes to ensure proper nesting and avoid layout issues.
 
 ## Step 3: Update the Header
 
 Update the placeholder header information in the HTML template created in Step 2.
 *   **Primary Tool:** `apply_diff`.
 
 1.  **Read MMD:** Extract the following paper details from the MMD file:
     *   Subject Name (e.g., Basic Electronics)
     *   Paper Title/Level (e.g., Craft Certificate in Information Technology)
     *   Month and Year (e.g., November 2017)
     *   Paper Code (e.g., 1920/103)
     *   Duration (e.g., 3 hours)
     *   Module: Use the specific qualification level (e.g., Craft Certificate) if a module number isn't explicitly stated.
 2.  **Use `apply_diff`:** Target the relevant tags in the HTML template:
     *   `<title>`: Should combine Subject, Month, Year (e.g., `<title>Basic Electronics - November 2017 | KNEC Diploma</title>`)
     *   `<h1>`: Subject Name (e.g., `<h1>Basic Electronics</h1>`)
     *   `<h2>`: Paper Title/Level and Date (e.g., `<h2>Craft Certificate in Information Technology - November 2017</h2>`)
     *   `<div class="exam-details">`: Update the `<p>` tags for Paper Code, Duration, and Module (using Qualification Level if Module number unknown).
 3.  **Replace Placeholders:** Ensure all placeholder text within these targeted tags is replaced with the correct, extracted information. **All fields listed above are mandatory.**
 4.  **Update Plan:** Mark Step 3 as complete in `conversion_plan.txt`.
 
 ## Step 4: Populate Main Content (Instructions & Questions ONLY)
 
 This step focuses on adding the paper's structure and question content. Answers will be added in Step 4b.
 *   **Primary Tools:** `apply_diff` (recommended) or `write_to_file`.
 
 1.  **Read MMD:** Extract the main instructions and all question content (excluding answers).
 2.  **Prepare Content Block:** Construct the HTML content that goes inside the `<main>...</main>` tags. This includes:
     *   **Top Navigation:** `<div class="paper-navigation top" id="nav-top"><a href="#" class="btn">Previous Paper</a><a href="index.html" class="btn">Home</a><a href="#" class="btn">Next Paper</a></div>` (Use placeholder `#` href values for now).
     *   **Instructions Section:** `<section class="paper-intro">...</section>` populated from OCR.
     *   **Questions Section:** `<section class="paper-content">...</section>` containing *all* `<div class="question">` blocks.
         *   For each question:
             *   Include `<h3>Question X (marks)</h3>`.
             *   Include `<div class="question-content">` with formatted question text from OCR.
             *   Include `<div class="answer-section">` with `<h4>Answer</h4>` and an **empty** `<div class="answer-content">` containing only the placeholder: `<!-- Answer content will be added in Step 4b -->`. **Do NOT add answers here.**
     *   **Bottom Navigation:** `<div class="paper-navigation bottom" id="nav-bottom"><a href="#" class="btn">Previous Paper</a><a href="index.html" class="btn">Home</a><a href="#" class="btn">Next Paper</a></div>` (Use placeholder `#` href values for now).
 3.  **Apply Content:**
     *   **Option A (Recommended): `apply_diff`**
         *   Target the empty `<main>` tags (read file first for line numbers).
         *   `SEARCH`: `<main>\n            </main>` (Adjust whitespace as needed).
         *   `REPLACE`: `<main>\n[Your prepared content block here]\n            </main>`
     *   **Option B: `write_to_file`**
         *   Combine the template structure (after Step 3) with your prepared content block inside `<main>`.
         *   Provide the *entire* HTML content.
 4.  **Update Plan:** Mark Step 4 as complete in `conversion_plan.txt`.
 
 ## Step 4b: Add Answers (Mandatory)
 **This step MUST be completed before proceeding to Step 5 or marking the paper as complete.**
 *   **Primary Tool:** `apply_diff`.
 
 
 1.  **Gather Answers:** Obtain the correct answers for each question part. This might involve manual entry, using an AI tool, or referencing a marking scheme.
 2.  **Format Answers:** Structure the answers clearly within HTML (paragraphs, lists, tables, code blocks, MathJax for equations, etc.). Include the disclaimer: `<p><em>Disclaimer: Answers are AI-generated and may contain errors. Verify independently.</em></p>` at the start of each answer block.
 3.  **Apply Answers using `apply_diff`:**
     *   For *each* question's answer section:
         *   Read the HTML file to get the correct line numbers for the target `<div class="answer-content">`.
         *   `SEARCH`: The placeholder comment `<!-- Answer content will be added in Step 4b -->` within its `<div class="answer-content">`.
         *   `REPLACE`: The formatted answer content (including the disclaimer).
         *   Example `apply_diff`:
           ```xml
           <apply_diff>
           <path>your_paper.html</path>
           <diff>
           <<<<<<< SEARCH
                           <div class="answer-content">
                               <!-- Answer content will be added in Step 4b -->
                           </div>
           =======
                           <div class="answer-content">
                               <p><em>Disclaimer: Answers are AI-generated and may contain errors. Verify independently.</em></p>
                               <p><strong>(a) Part Title:</strong> Detailed answer text here...</p>
                               <p><strong>(b) Part Title:</strong> More answer text...</p>
                               <!-- Add formatted lists, tables, math, etc. as needed -->
                           </div>
           >>>>>>> REPLACE
           </diff>
           <start_line>XX</start_line> <!-- Line number for <div class="answer-content"> -->
           <end_line>YY</end_line>   <!-- Line number for closing </div> -->
           </apply_diff>
           ```
 4.  **Update Plan:** Mark Step 4b as complete (`[X]`) in `conversion_plan.txt`.
 
 ## Step 5: Embed the Sidebar
 
 Insert the standard navigation sidebar into the paper's HTML.
 *   **Primary Tools:** `list_files` (to verify links), `apply_diff`.
 
 1.  **Prepare Sidebar Content:** Read the standard sidebar HTML structure (e.g., from `index.html` if it exists and is up-to-date, or generate dynamically based on existing files).
 2.  **Verify Sidebar Links:** Before inserting, **check that every `href` value within the sidebar HTML corresponds to an existing `.html` file** in the target directory (use `list_files`). Remove or comment out links to non-existent files.
 3.  **Locate Insertion Point:** In the paper's HTML file, find the line containing `<div class="container main-content">`.
 4.  **Insert Verified Sidebar using `apply_diff`:**
     *   Read the file to get correct line numbers.
     *   `SEARCH`: The line `<div class="container main-content">` and the following `<main>` line.
     *   `REPLACE`: The `<div class="container main-content">` line, followed by the *entire verified sidebar HTML*, followed by the `<main>` line.
 5.  **Update Plan:** Mark Step 5 as complete in `conversion_plan.txt`.
 
 ## Step 6: Update Top and Bottom Navigation Links
 
 Update the "Previous Paper", "Home", and "Next Paper" links in the top and bottom navigation bars.
 *   **Primary Tools:** `list_files` (to determine neighbors), `apply_diff`.
 
 1.  **Determine Links:** Identify the correct filenames for the "Previous Paper" and "Next Paper" based on chronological order of *existing* HTML files (use `list_files`). If a neighbor doesn't exist, find the next available one or use `href="#"` with a `disabled` class. Include `index.html` for "Home".
 2.  **Read File:** Use `read_file` on the *current* state of the HTML file to get accurate line numbers.
 3.  **Update Top Navigation using `apply_diff`:**
     *   Target the `<div class="paper-navigation top" id="nav-top">` block.
     *   Replace the placeholder `<a>` tags with three `<a>` tags: "Previous Paper ([Month Year])", "Home", "Next Paper ([Month Year])", using correct `href`s and `disabled` class where needed.
 4.  **Update Bottom Navigation using `apply_diff`:**
     *   Target the `<div class="paper-navigation bottom" id="nav-bottom">` block.
     *   Apply the same replacements as for the top navigation.
 5.  **Update Plan:** Mark Step 6 as complete in `conversion_plan.txt`.
 
 ## Step 7: Verify All Links (Crucial Final Check)
 
 After creating or updating multiple paper files, ensure link consistency across *all* existing HTML files.
 *   **Primary Tools:** `list_files`, `apply_diff`.
 
 1.  **List Existing HTML Files:** Use `list_files`.
 2.  **Generate Strict Sidebar HTML:** Create sidebar code with links *only* to existing HTML files.
 3.  **Update `index.html` (if exists):**
     *   Use `apply_diff` to replace its sidebar with the strict version.
     *   Verify its main content links only to existing files.
 4.  **Update Each Past Paper HTML File:**
     *   Iterate through existing HTML files.
     *   For each file:
         *   Use `apply_diff` to replace its sidebar with the strict version.
         *   Determine correct Previous/Next links based on existing files.
         *   Use `apply_diff` to update top and bottom navigation links (`#nav-top`, `#nav-bottom`) with correct `href`s, descriptive text, and `disabled` class if needed.
 5.  **Update Plan:** Mark Step 7 as complete in `conversion_plan.txt`.
 
 ## Step 8: Formatting Special Content
 
 Apply specific HTML formatting for tables, figures, math, code, and diagrams.
 *   **Primary Tools:** `apply_diff`, `execute_command` (for `curl` to download images).
 
 Apply these formats *within* the `question-content` or `answer-content` divs (usually during Step 4 or 4b, or later with `apply_diff`). **Update `conversion_plan.txt`** after applying necessary formatting for a paper.
 
 *   **Tables:** `<table class="data-table">...</table>`. Use `<thead>`, `<tbody>`, `<tr>`, `<th>`, `<td>`. See `examples/example_table.html`.
 *   **Figures/Images:**
     *   **Source:** Check MMD for `![](image_url)`.
     *   **Local Storage (Recommended):**
         1.  Ensure `images/` directory exists (`mkdir -p images`).
         2.  Find URL in MMD.
         3.  Download: `curl -o images/[paper_name]_fig[N].jpg 'image_url'`
         4.  Reference Locally:
             ```html
             <figure class="question-figure">
                 <img src="images/2023j_fig1.jpg" alt="Description..." style="max-width: 60%; height: auto;">
                 <figcaption>Figure 1</figcaption>
             </figure>
             ```
         5.  Resize using inline `style` if needed.
     *   See `examples/example_figure.html`.
 *   **Math Equations:** Use MathJax (`\[...\]` display, `\(...\)` inline). See `examples/example_equation.html`.
 *   **Code Snippets:** `<pre class="code-block"><code class="language-xxx">...</code></pre>`. See `examples/example_code.html`.
 *   **Diagrams (ASCII or SVG):**
     *   **Requirement:** If a visual representation is needed, include it as ASCII or SVG. If not possible, use placeholder: `<!-- Visual representation needed: [Description] -->`.
     *   **ASCII:** Enclose in `<pre class="diagram-code">...</pre>`. Add `<p class="diagram-caption">...</p>` if needed.
     *   **SVG:** Embed `<svg>...</svg>` directly.
     *   See `examples/example_diagram.html`.
 
 ## Step 9: Final Review and Verification
 
 The verification process uses Selenium with ChromeDriver to perform automated testing of HTML files. This is a required step that MUST be completed before marking any paper as complete.
 
 ### 9a. Automated Verification (Required)
 *   **Primary Tool:** `execute_command` (to run `python3 examples/verify_pastpapers.py`).
 
 The `verify_pastpapers.py` script in the examples directory performs comprehensive automated testing using Selenium WebDriver and BeautifulSoup4.
 
 #### Prerequisites
 ```bash
 # Install required Python packages
 pip install -r examples/requirements.txt  # Contains selenium, beautifulsoup4, html5lib
 
 # Configure ChromeDriver (if needed)
 python3 examples/setup_chromedriver.py
 ```
 
 #### Running Verification
 ```bash
 # Navigate to examples directory
 cd examples
 
 # Verify a specific file
 python3 verify_pastpapers.py ../your-file.html
 
 # Verify all HTML files
 python3 verify_pastpapers.py
 ```
 
 #### What Gets Verified
 The script performs these checks:
 
 1. **HTML Structure** (Using BeautifulSoup):
    - Valid HTML5 document structure
    - Proper tag nesting
    - Required semantic elements
    - Container hierarchy
 
 2. **Required Elements** (Using Selenium):
    - Header and metadata
    - Navigation sections
    - Content structure
    - Question/answer blocks
 
 3. **Navigation Links**:
    - Href validity
    - Previous/Next consistency
    - Disabled states
    - Home link
 
 4. **CSS Styling**:
    - Class presence
    - Layout properties
    - Margins and padding
    - Display attributes
 
 5. **Images**:
    - Loading success
    - Alt text presence
    - File availability
    - Proper dimensions
 
 6. **Sidebar**:
    - Structure correctness
    - Link functionality
    - Navigation hierarchy
 
 #### Understanding Results
 The script outputs results in this format:
 ```
 Verifying your-file.html...
 --------------------------------------------------
 STRUCTURE: PASS|FAIL|WARN - [Details]
 ELEMENTS: PASS|FAIL|WARN - [Details]
 NAVIGATION: PASS|FAIL|WARN - [Details]
 STYLING: PASS|FAIL|WARN - [Details]
 IMAGES: PASS|FAIL|WARN - [Details]
 SIDEBAR: PASS|FAIL|WARN - [Details]
 ```
 
 Result meanings:
 - PASS: Check successful
 - WARN: Issue needs review but not blocking
 - FAIL: Must be fixed before proceeding
 
 #### Handling Issues
 1. If any check FAILs:
    - Review the specific error message
    - Check the mentioned file/line
    - Compare with working examples
    - Fix and re-run verification
 
 2. For WARNings:
    - Review if the warning is acceptable
    - Document any accepted warnings
    - Fix if possible
 
 3. Update conversion_plan.txt with verification results
 
 ### 9b. Manual Verification (If Needed)
 
 1. **Setup Requirements:**
    ```bash
    cd examples
    pip install -r requirements.txt  # Installs selenium, beautifulsoup4, html5lib
    python3 setup_chromedriver.py   # Configures ChromeDriver
    ```
 
 2. **Running Verification:**
    ```bash
    cd examples
    python3 verify_pastpapers.py ../your-file.html
    ```
 
 3. **What Gets Verified:**
 - HTML Structure: Validates semantic elements and proper nesting
 - Required Elements: Verifies presence of header, navigation, content sections
 - Navigation Links: Tests href validity and proper text
 - CSS Styling: Checks classes and layout rules
 - Images: Verifies loading and alt text
 - Sidebar: Validates structure and links
 
 Example output:
 ```
 Verifying your-file.html...
 --------------------------------------------------
 STRUCTURE: PASS - HTML structure is valid
 ELEMENTS: PASS - All required elements present
 NAVIGATION: PASS - Found 4 valid navigation links
 STYLING: PASS - CSS styling verified
 IMAGES: PASS - All images loaded successfully
 SIDEBAR: PASS - Sidebar verified with 4 links
 ```
 
 Address any WARN or FAIL results before proceeding.
 
 ### 9b. Manual Verification (If Needed)
 
 If automated verification isn't available or additional checks are required:
 
 1.  **Read Final Content:** Use `read_file`.
 2.  **Verify Structure (Crucial):**
     *   Correct number of `<div class="question">` blocks.
     *   Each question has `<div class="question-content">` AND `<div class="answer-section">` with `<div class="answer-content">`.
     *   **Answers Populated:** Confirm `<div class="answer-content">` is NOT just the placeholder comment (unless answers truly unavailable).
     *   Sidebar exists and is correctly placed (if applicable).
     *   Top and bottom navigation divs exist with three `<a>` tags each.
 3.  **Verify Content:**
     *   Check `<title>` and `<header>`.
     *   Spot-check question text.
     *   Check navigation `href` values.
     *   Check sidebar `href` for the current paper.
 4.  **Browser Test (Highly Recommended):**
     *   Use `open your-paper-name.html`.
     *   Check layout, sidebar, navigation links, special formatting rendering.
 5.  **Update Plan:** Mark Step 9 as complete in `conversion_plan.txt`. Mark overall status as `COMPLETED`.
 
 
 ## Final Manual Review
 *   **Primary Tools:** `execute_command` (with `open`), `apply_diff` (for minor fixes).
 
 Always perform a final manual browser check for formatting, rendering, OCR errors, and layout. Use `apply_diff` for minor adjustments if needed.
 
 ## 11. Missing Papers List
 
 Keep a simple list of missing papers in `missing_papers_report.md`. Update this list whenever converting papers.
 
 ### Format Example
 ```markdown
 # Missing Past Papers List
 
 2022
 - November
 
 2021
 - July
 
 [etc...]
 ```
 
 ### Maintenance
 - Update after each paper conversion
 - List only July and November papers
 - Order by year (newest first)
 - Remove papers from list once converted
 
 ## 12. Conclusion
 
 Following this standardized conversion process ensures that all past examination papers maintain consistent structure, formatting, and accessibility features. The automated verification in Step 10 provides a final quality assurance check before papers are published.
 
 By maintaining this systematic approach:
 - Students benefit from a consistent learning experience
 - Search engines can better index the content
 - Accessibility tools work properly with the semantic structure
 - Future updates can be applied uniformly across all papers
 
 Remember to update the conversion plan document at each step and verify that all requirements are met before marking a paper as complete.

. requirements.txt
 Content:
 selenium==4.18.1
 beautifulsoup4==4.12.3
 html5lib==1.1

. setup_chromedriver.py
 Content:
 from selenium import webdriver
 from selenium.webdriver.chrome.service import Service
 import os
 
 def setup_chromedriver():
     """Setup ChromeDriver for Selenium tests"""
     try:
         # Create a new Chrome Options instance
         options = webdriver.ChromeOptions()
         options.add_argument('--headless')  # Run in headless mode
         options.add_argument('--no-sandbox')
         options.add_argument('--disable-dev-shm-usage')
         
         # Create a new Chrome driver instance
         driver = webdriver.Chrome(options=options)
         
         # Quit the driver to ensure setup was successful
         driver.quit()
         print("ChromeDriver setup successful!")
         return True
     except Exception as e:
         print(f"Error setting up ChromeDriver: {e}")
         return False
 
 if __name__ == "__main__":
     setup_chromedriver()

. sidebar_optimization.md
 Content:
 # Sidebar and Navigation Optimization
 
 ## Current Implementation Analysis
 
 ### Strengths
 1. Automatically highlights current page
 2. Handles deep nested list structures
 3. Uses MutationObserver for dynamic sidebar loading
 4. Clean year-based organization
 
 ### Areas for Improvement
 
 #### Sidebar Navigation
 1. Add collapsible sections:
 ```javascript
 // Add to sidebar-navigation.js
 function initializeCollapsibleSections() {
     const yearHeaders = document.querySelectorAll('.sidebar-nav h4');
     yearHeaders.forEach(header => {
         header.addEventListener('click', () => {
             const parentLi = header.closest('li');
             parentLi.classList.toggle('collapsed');
         });
     });
 }
 ```
 
 2. Implement mobile-friendly navigation:
 ```javascript
 // Add to sidebar-navigation.js
 function initializeMobileNavigation() {
     const toggleButton = document.createElement('button');
     toggleButton.classList.add('sidebar-toggle');
     toggleButton.innerHTML = '☰';
     document.querySelector('.sidebar').prepend(toggleButton);
     
     toggleButton.addEventListener('click', () => {
         document.querySelector('.sidebar').classList.toggle('mobile-visible');
     });
 }
 ```
 
 3. Add persistent state for expanded sections:
 ```javascript
 // Add to sidebar-navigation.js
 function saveNavigationState() {
     const expandedItems = [...document.querySelectorAll('.sidebar-nav li.expanded')]
         .map(li => li.dataset.year);
     localStorage.setItem('expandedSections', JSON.stringify(expandedItems));
 }
 
 function restoreNavigationState() {
     const expandedItems = JSON.parse(localStorage.getItem('expandedSections') || '[]');
     expandedItems.forEach(year => {
         const yearSection = document.querySelector(`[data-year="${year}"]`);
         if (yearSection) yearSection.classList.add('expanded');
     });
 }
 ```
 
 4. Implement missing scroll-to-top feature:
 ```html
 <!-- Add to index.html -->
 <button class="scroll-to-top" aria-label="Scroll to top">↑</button>
 ```
 
 ```css
 /* Add to styles.css */
 .scroll-to-top {
     position: fixed;
     bottom: 20px;
     right: 20px;
     background: #333;
     color: white;
     width: 40px;
     height: 40px;
     border-radius: 50%;
     border: none;
     cursor: pointer;
     opacity: 0;
     transition: opacity 0.3s;
     z-index: 1000;
 }
 
 .scroll-to-top.visible {
     opacity: 1;
 }
 ```
 
 #### Navigation Structure
 1. Update sidebar structure for better accessibility:
 ```html
 <nav class="sidebar-nav" aria-label="Past Papers Navigation">
     <ul role="tree">
         <li role="treeitem" aria-expanded="true">
             <h4>2017</h4>
             <ul role="group">
                 <li role="treeitem"><a href="2017july.html">July 2017</a></li>
             </ul>
         </li>
     </ul>
 </nav>
 ```
 
 2. Add breadcrumb navigation:
 ```html
 <nav aria-label="Breadcrumb" class="breadcrumb">
     <ol>
         <li><a href="index.html">Home</a></li>
         <li><a href="#year-2017">2017</a></li>
         <li aria-current="page">July 2017</li>
     </ol>
 </nav>
 ```
 
 #### Performance Optimizations
 1. Lazy load sidebar content for better initial page load
 2. Implement virtual scrolling for large paper collections
 3. Cache sidebar state in localStorage
 4. Use CSS containment for better rendering performance
 
 ## Implementation Plan
 
 1. Create new branch for navigation improvements
 2. Update sidebar-navigation.js with new features
 3. Add corresponding CSS in styles.css
 4. Update HTML templates with new structure
 5. Add mobile-specific styles and behaviors
 6. Test across different devices and browsers
 7. Document all changes in the codebase
 
 ## Future Considerations
 
 1. Search functionality for papers
 2. Filter papers by year/session
 3. Tags for paper topics/difficulty
 4. Related papers suggestion
 5. Print-friendly versions
 6. Paper difficulty ratings
 7. Study progress tracking
 
 ## Maintenance Guidelines
 
 1. Keep year sections in reverse chronological order
 2. Maintain consistent HTML structure
 3. Test mobile responsiveness
 4. Update documentation for new features
 5. Regular performance monitoring
 6. Accessibility testing
 7. Cross-browser testing

. styles.css
 Content:
 /* Base styles */
 :root {
     --primary-color: #0056b3; /* Darker blue */
     --secondary-color: #007bff; /* Standard blue */
     --text-color: #343a40; /* Darker gray */
     --light-bg: #f8f9fa;
     --border-color: #dee2e6; /* Lighter border */
     --sidebar-width: 250px;
 }
 
 * {
     margin: 0;
     padding: 0;
     box-sizing: border-box;
 }
 
 body {
     font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"; /* Modern system font stack */
     line-height: 1.6;
     color: var(--text-color);
     background-color: #fff; /* Ensure clean white background */
 }
 
 /* Container */
 .container {
     width: 100%;
     max-width: 1200px;
     margin: 0 auto;
     padding: 0 1rem;
 }
 
 /* Header */
 header {
     background-image: linear-gradient(to right, var(--primary-color), var(--secondary-color)); /* Add gradient */
     color: white; /* Set text color back to white */
     padding: 2rem 0;
     margin-bottom: 3rem; /* Increase margin */
     border-bottom: none; /* Remove border as background provides separation */
 }
 
 header h1 {
     font-size: 2.2rem; /* Slightly larger */
     margin-bottom: 0.5rem;
     /* color: var(--text-color); */ /* Remove - inherit white */
 }
 
 header h2 {
     font-size: 1.4rem; /* Slightly smaller */
     font-weight: 400; /* Regular weight */
     /* color: #6c757d; */ /* Remove - inherit white */
     opacity: 0.9; /* Slightly less prominent */
 }
 
 .exam-details {
     margin-top: 1rem;
     /* color: #6c757d; */ /* Remove - inherit white */
     font-size: 0.9rem;
     opacity: 0.9; /* Slightly less prominent */
 }
 
 /* Main content layout */
 .main-content {
     display: flex;
     gap: 2rem;
     margin: 2rem auto;
 }
 
 /* Sidebar */
 .sidebar {
     width: var(--sidebar-width);
     flex-shrink: 0;
     background: var(--light-bg);
     border-radius: 10px; /* Slightly more rounded corners */
     padding: 1.2rem; /* Increased padding */
     position: sticky;
     top: 1rem;
     height: calc(100vh - 2rem);
     overflow-y: auto;
     box-shadow: 0 2px 5px rgba(0,0,0,0.1); /* Subtle shadow */
 }
 
 .sidebar-header {
     margin-bottom: 1rem;
     padding-bottom: 0.5rem;
     border-bottom: 1px solid var(--border-color);
 }
 
 .sidebar-nav ul {
     list-style: none;
 }
 
 .sidebar-nav a {
     display: block;
     padding: 0.6rem; /* Increased padding */
     color: var(--text-color);
     text-decoration: none;
     border-radius: 6px; /* Slightly more rounded corners */
     transition: background-color 0.3s ease; /* Smoother transition */
 }
 
 .sidebar-nav a:hover,
 .sidebar-nav a.active,
 .sidebar-nav .expanded > h4 {
     background-color: var(--secondary-color);
     color: white;
 }
 
 /* Main content area */
 main {
     flex-grow: 1;
 }
 
 /* Question styling */
 .question {
     background: white;
     border: 1px solid var(--border-color);
     border-radius: 8px;
     margin-bottom: 2rem;
     padding: 1.5rem;
     box-shadow: 0 2px 4px rgba(0,0,0,0.05);
 }
 
 .question h3 {
     color: var(--primary-color);
     margin-bottom: 1rem;
     padding-bottom: 0.5rem;
     border-bottom: 2px solid var(--border-color);
 }
 
 .question-content {
     margin-bottom: 1.5rem;
 }
 
 .answer-section {
     background: #e9ecef; /* Slightly tinted background */
     border-radius: 4px;
     padding: 1rem;
     margin-top: 1rem;
     border-top: 1px solid var(--border-color); /* Add separator */
 }
 
 .answer-section h4 {
     color: var(--primary-color);
     margin-bottom: 1rem;
 }
 
 .answer-content h5 { /* Style sub-headings in answers */
     font-weight: 600;
     margin-top: 1.2rem;
     margin-bottom: 0.6rem;
     color: #333; /* Slightly darker than default text */
 }
 
 /* Improve spacing within question/answer content */
 .question-content p,
 .answer-content p,
 .question-content ul,
 .answer-content ul,
 .question-content ol,
 .answer-content ol,
 .question-content pre,
 .answer-content pre {
     margin-bottom: 1rem;
 }
 
 /* Ensure standard list indentation and style */
 .question-content ul,
 .answer-content ul {
     padding-left: 1.5rem; /* Standard indentation */
     list-style-type: disc; /* Explicitly set bullet style */
     list-style-position: outside; /* Ensure markers are outside text flow */
 }
 .question-content ol,
 .answer-content ol {
     padding-left: 1.5rem; /* Standard indentation */
     list-style-type: decimal; /* Explicitly set number style */
     list-style-position: outside; /* Ensure markers are outside text flow */
 }
 
 /* Add spacing between list items */
 .question-content li,
 .answer-content li {
     margin-bottom: 0.5rem; /* Adjust spacing between items */
 }
 
 /* Style inline code */
 code {
     font-family: 'Consolas', 'Monaco', monospace;
     background-color: #f0f0f0; /* Light gray background */
     padding: 0.1em 0.3em;
     border-radius: 3px;
     font-size: 0.95em;
 }
 
 /* Code blocks */
 pre {
     background: #2d2d2d;
     color: #f8f8f2;
     padding: 1rem;
     border-radius: 4px;
     overflow-x: auto;
     font-family: 'Consolas', 'Monaco', monospace;
     margin: 1rem 0;
 }
 
 /* Ensure code within pre doesn't inherit inline styles */
 pre code {
     background-color: transparent;
     padding: 0;
     border-radius: 0;
     font-size: 1em; /* Inherit pre font size */
 }
 
 /* Tables */
 .data-table {
     width: 100%;
     border-collapse: collapse;
     margin: 1rem 0;
 }
 
 .data-table th,
 .data-table td {
     padding: 0.75rem;
     border: 1px solid var(--border-color);
 }
 
 .data-table th {
     background: var(--light-bg);
     font-weight: 600;
 }
 
 /* Navigation buttons */
 .paper-navigation {
     display: flex;
     justify-content: space-between;
     margin: 2rem 0;
 }
 
 .btn {
     display: inline-block;
     padding: 0.5rem 1rem;
     background: var(--primary-color);
     color: white;
     text-decoration: none;
     border-radius: 4px;
     transition: background-color 0.2s;
 }
 
 .btn:hover {
     background: var(--secondary-color);
 }
 
 /* Scroll to top button */
 .scroll-to-top {
     position: fixed;
     bottom: 2rem;
     right: 2rem;
     width: 40px;
     height: 40px;
     background: var(--primary-color);
     color: white;
     border: none;
     border-radius: 50%;
     cursor: pointer;
     display: none;
     font-size: 20px;
     box-shadow: 0 2px 5px rgba(0,0,0,0.2);
 }
 
 .scroll-to-top:hover {
     background: var(--secondary-color);
 }
 
 /* Responsive design */
 @media (max-width: 768px) {
     .main-content {
         flex-direction: column;
     }
 
     .sidebar {
         width: 100%;
         position: static;
         height: auto;
         margin-bottom: 2rem;
     }
 
     main {
         max-width: 100%;
     }
 }
 
 /* Paper grid and cards */
 .paper-grid {
     display: grid;
     grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
     gap: 2rem; /* Increased gap */
     margin: 2rem 0;
 }
 
 .paper-card {
     background: var(--light-bg); /* Use light background */
     border: none; /* Remove border */
     border-radius: 12px; /* More rounded */
     padding: 1.5rem;
     box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05); /* Subtle shadow */
     transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
 }
 
 .paper-card:hover {
     transform: translateY(-5px); /* Slightly more lift */
     box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1); /* Enhanced shadow on hover */
 }
 
 .paper-card h3 {
     color: var(--primary-color);
     margin-bottom: 0.75rem; /* Reduced margin */
     font-size: 1.15rem; /* Slightly larger */
     font-weight: 600;
 }
 
 .paper-card .meta {
     color: #666;
     font-size: 0.9rem;
     margin-bottom: 1rem;
 }
 
 .paper-card .actions {
     display: flex;
     gap: 1rem;
 }
 
 .year-section {
     margin-bottom: 4rem; /* Increased bottom margin */
 }
 
 .year-section h2 {
     color: var(--primary-color); /* Use primary color */
     margin-bottom: 2rem; /* Increased margin below heading */
     padding-bottom: 0.5rem;
     border-bottom: 1px solid var(--border-color); /* Lighter border */
     font-size: 1.8rem; /* Even larger */
     font-weight: 300; /* Lighter weight for modern feel */
     letter-spacing: 1px; /* Add some letter spacing */
 }
 
 /* Print styles */
 @media print {
     .sidebar,
     .paper-navigation,
     .scroll-to-top {
         display: none;
     }
 
     main {
         max-width: 100%;
     }
 
     .question {
         break-inside: avoid;
         border: none;
         box-shadow: none;
     }
 
     a {
         text-decoration: none;
         color: black;
     }
 }
 
 /* Index page specific link styling */
 .paper-card h3 a {
     text-decoration: none;
     color: inherit; /* Inherit color from h3 */
 }
 
 .paper-card h3 a:hover {
     text-decoration: underline; /* Underline on hover */
     color: var(--secondary-color); /* Change color on hover */
 }

. template_paper.html
 Content:
 <!DOCTYPE html>
 <html lang="en">
 <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>[Paper Name] - [Month Year] | KNEC Diploma</title> <!-- Update in Step 3 -->
     <link rel="stylesheet" href="../styles.css"> <!-- Adjusted path -->
     <script src="../js/sidebar-navigation.js" defer></script> <!-- Adjusted path -->
     <!-- MathJax Configuration -->
     <script>
         MathJax = {
           tex: { inlineMath: [['$', '$'], ['\\(', '\\)']], displayMath: [['$$', '$$'], ['\\[', '\\]']], processEscapes: true, processEnvironments: true },
           options: { skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre'] }
         };
     </script>
     <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js" id="MathJax-script" async></script>
 </head>
 <body>
     <header>
         <div class="container">
             <h1>PLACEHOLDER SUBJECT</h1> <!-- Update in Step 3 -->
             <h2>PLACEHOLDER LEVEL - MONTH YEAR</h2> <!-- Update in Step 3 -->
             <div class="exam-details">
                 <p>Paper Code: PLACEHOLDER</p> <!-- Update in Step 3 -->
                 <p>Duration: PLACEHOLDER</p> <!-- Update in Step 3 -->
                 <p>Module: PLACEHOLDER</p> <!-- Update in Step 3 -->
             </div>
         </div>
     </header>
 
     <main class="container">
         <div class="main-content">
             <!-- Sidebar (Step 5) -->
             <div class="sidebar">
                  <!-- Placeholder: Content added in Step 5 -->
                  <p>Sidebar content goes here.</p>
             </div>
             <div class="content-wrapper">
                 <!-- Top Navigation (Step 6) -->
                 <div class="paper-navigation top" id="nav-top">
                      <!-- Placeholder: Content added in Step 6 -->
                      <a href="#" class="btn">Previous</a>
                      <a href="../index.html" class="btn">Home</a> <!-- Adjusted path -->
                      <a href="#" class="btn">Next</a>
                 </div>
                 <!-- Main Content (Step 4 & 4b) -->
                 <section class="paper-intro">
                      <!-- Placeholder: Content added in Step 4 -->
                      <h3>Instructions</h3>
                      <p>Instructions content goes here.</p>
                 </section>
                 <section class="paper-content">
                      <!-- Placeholder: Content added in Step 4 -->
                      <!-- Example Question Structure -->
                      <div class="question" id="question-1">
                          <h3>Task 1 (Example)</h3>
                          <div class="question-content">
                              <p>(a) Question part a...</p>
                              <p>(b) Question part b...</p>
                          </div>
                          <div class="answer-section">
                              <h4>Answer</h4>
                              <div class="answer-content">
                                  <!-- Answer content will be added in Step 4b -->
                                  <p>Answer placeholder.</p>
                              </div>
                          </div>
                      </div>
                 </section>
                 <!-- Bottom Navigation (Step 6) -->
                 <div class="paper-navigation bottom" id="nav-bottom">
                      <!-- Placeholder: Content added in Step 6 -->
                      <a href="#" class="btn">Previous</a>
                      <a href="../index.html" class="btn">Home</a> <!-- Adjusted path -->
                      <a href="#" class="btn">Next</a>
                 </div>
             </div>
         </div>
     </main>
 
     <footer>
         <div class="container">
             <p>&copy; 2025 Subject Past Papers Collection | Kenya National Examinations Council</p>
         </div>
     </footer>
 </body>
 </html>

. verify_pastpapers.py
 Content:
 from selenium import webdriver
 from selenium.webdriver.chrome.options import Options
 from selenium.webdriver.common.by import By
 from selenium.webdriver.support.ui import WebDriverWait
 from selenium.webdriver.support import expected_conditions as EC
 import os
 import sys  # Import sys module
 from bs4 import BeautifulSoup
 import html5lib
 
 class PastpaperVerifier:
     def __init__(self):
         # Set up Chrome options for headless browsing
         chrome_options = Options()
         chrome_options.add_argument("--headless")
         chrome_options.add_argument("--no-sandbox")
         chrome_options.add_argument("--disable-dev-shm-usage")
         
         self.driver = webdriver.Chrome(options=chrome_options)
         self.wait = WebDriverWait(self.driver, 10)
         
     def verify_html_file(self, html_path):
         print(f"\nVerifying {html_path}...")
         
         # First verify HTML structure and syntax
         structure_result = self.verify_html_syntax(html_path)
         if structure_result["status"] == "FAIL":
             print(f"\nResults for {html_path}:")
             print("-" * 50)
             print(f"STRUCTURE: {structure_result['status']} - {structure_result['message']}")
             return
         
         # If structure is valid, proceed with other checks
         file_url = f"file://{os.path.abspath(html_path)}"
         self.driver.get(file_url)
         
         results = {
             "structure": structure_result,
             "elements": self.verify_required_elements(),
             "navigation": self.verify_navigation(),
             "styling": self.verify_styling(),
             "images": self.verify_images(),
             "sidebar": self.verify_sidebar(),
             "placeholders": self.verify_placeholder_links(),
             "answers": self.verify_answer_content() # New check for empty answers
         }
         
         return results
 
     def verify_html_syntax(self, html_path):
         try:
             with open(html_path, 'r', encoding='utf-8') as file:
                 content = file.read()
                 
             # Parse with html5lib for strict HTML5 validation
             soup = BeautifulSoup(content, 'html5lib')
             
             # Check for required elements
             if not soup.find('main'):
                 return {"status": "FAIL", "message": "Missing <main> tag"}
             
             # Check for mismatched tags
             main_tags = content.count('<main')
             main_closing_tags = content.count('</main>')
             if main_tags != main_closing_tags:
                 return {"status": "FAIL", "message": f"Mismatched <main> tags: {main_tags} opening vs {main_closing_tags} closing tags"}
             
             # Check main structure
             main_tag = soup.find('main')
             if not main_tag.find(class_='main-content'):
                 return {"status": "FAIL", "message": "Missing .main-content container inside <main>"}
             
             # Check content structure
             main_content = main_tag.find(class_='main-content')
             if not (main_content.find(class_='sidebar') and main_content.find(class_='content-wrapper')):
                 return {"status": "FAIL", "message": "Incorrect structure: .main-content should contain .sidebar and .content-wrapper"}
             
             return {"status": "PASS", "message": "HTML structure is valid"}
         except Exception as e:
             return {"status": "FAIL", "message": f"HTML syntax error: {str(e)}"}
     
     def verify_required_elements(self):
         try:
             # Check for header and its contents
             header = self.wait.until(EC.presence_of_element_located((By.TAG_NAME, "header")))
             if not header.find_element(By.TAG_NAME, "h1"):
                 return {"status": "FAIL", "message": "Missing h1 in header"}
                 
             # Check for main content structure
             main = self.driver.find_element(By.TAG_NAME, "main")
             if not main.get_attribute("class") or "container" not in main.get_attribute("class"):
                 return {"status": "FAIL", "message": "Main tag missing container class"}
             
             # Check content organization
             content_wrapper = self.driver.find_element(By.CLASS_NAME, "content-wrapper")
             if not content_wrapper:
                 return {"status": "FAIL", "message": "Missing content-wrapper element"}
             
             return {"status": "PASS", "message": "All required elements present and properly structured"}
         except Exception as e:
             return {"status": "FAIL", "message": f"Required elements verification failed: {str(e)}"}
     
     def verify_navigation(self):
         try:
             nav_links = self.driver.find_elements(By.CSS_SELECTOR, ".paper-navigation a:not(.disabled)")
             working_links = []
             broken_links = []
             
             for link in nav_links:
                 href = link.get_attribute("href")
                 if href and href.endswith(".html"):
                     working_links.append(href)
                 else:
                     broken_links.append(href)
             
             if broken_links:
                 return {"status": "WARN", "message": f"Found {len(broken_links)} potentially broken links"}
             return {"status": "PASS", "message": f"Found {len(working_links)} valid navigation links"}
         except Exception as e:
             return {"status": "FAIL", "message": f"Navigation verification failed: {str(e)}"}
     
     def verify_styling(self):
         try:
             style_links = self.driver.find_elements(By.CSS_SELECTOR, 'link[rel="stylesheet"]')
             if not any("styles.css" in link.get_attribute("href") for link in style_links):
                 return {"status": "FAIL", "message": "styles.css not found"}
             
             main_content = self.driver.find_element(By.CLASS_NAME, "main-content")
             style = self.driver.execute_script('''
                 var style = window.getComputedStyle(arguments[0]);
                 return {
                     margin: style.margin,
                     padding: style.padding,
                     display: style.display
                 }
             ''', main_content)
             
             style_checks = {
                 "margin": style['margin'] != '0px',
                 "padding": style['padding'] != '0px',
                 "display": style['display'] in ['block', 'flex']
             }
             
             failed_checks = [k for k, v in style_checks.items() if not v]
             if failed_checks:
                 return {"status": "WARN", "message": f"Basic styling missing for: {', '.join(failed_checks)}"}
             
             return {"status": "PASS", "message": "CSS styling verified"}
         except Exception as e:
             return {"status": "FAIL", "message": f"Styling verification failed: {str(e)}"}
     
     def verify_images(self):
         try:
             images = self.driver.find_elements(By.TAG_NAME, "img")
             if not images:
                 return {"status": "INFO", "message": "No images found in document"}
             
             broken_images = []
             for img in images:
                 if not img.get_attribute("complete") or img.get_attribute("naturalWidth") == "0":
                     broken_images.append(img.get_attribute("src"))
             
             if broken_images:
                 return {"status": "FAIL", "message": f"Found {len(broken_images)} broken images"}
             return {"status": "PASS", "message": f"All {len(images)} images loaded successfully"}
         except Exception as e:
             return {"status": "FAIL", "message": f"Image verification failed: {str(e)}"}
     
     def verify_sidebar(self):
         try:
             sidebar = self.driver.find_element(By.CLASS_NAME, "sidebar")
             if not sidebar.is_displayed():
                 return {"status": "WARN", "message": "Sidebar exists but may not be visible"}
             
             # Check for sidebar content
             links = sidebar.find_elements(By.TAG_NAME, "a")
             if not links:
                 return {"status": "WARN", "message": "Sidebar has no navigation links"}
             
             return {"status": "PASS", "message": f"Sidebar verified with {len(links)} links"}
         except Exception as e:
             return {"status": "FAIL", "message": f"Sidebar verification failed: {str(e)}"}
     def verify_placeholder_links(self):
         try:
             all_links = self.driver.find_elements(By.TAG_NAME, "a")
             placeholder_links = []
             for link in all_links:
                 href = link.get_attribute("href")
                 # Check if href is None, empty string, or just "#"
                 if href is None or href.strip() == "" or href.strip() == "#":
                     # Try to get some identifying text for the link
                     link_text = link.text.strip()
                     if not link_text:
                         # If no text, maybe check for an image inside?
                         try:
                             img = link.find_element(By.TAG_NAME, "img")
                             link_text = f"img src='{img.get_attribute('src')}'"
                         except:
                             link_text = "[link with no text]"
                     placeholder_links.append(f"'{link_text}' (href='{href}')")
             
             if placeholder_links:
                 count = len(placeholder_links)
                 # Optionally list the links found if needed for debugging
                 # details = ", ".join(placeholder_links)
                 # return {"status": "WARN", "message": f"Found {count} placeholder links: {details}"}
                 return {"status": "WARN", "message": f"Found {count} placeholder links (href='' or href='#')"}
             return {"status": "PASS", "message": "No placeholder links found"}
         except Exception as e:
             return {"status": "FAIL", "message": f"Placeholder link verification failed: {str(e)}"}
     def verify_answer_content(self):
         try:
             questions = self.driver.find_elements(By.CSS_SELECTOR, "div.question")
             empty_answers = []
             
             if not questions:
                 return {"status": "INFO", "message": "No question divs found to check answers"}
 
             for question in questions:
                 question_id = question.get_attribute("id") or "[No ID]"
                 try:
                     answer_content = question.find_element(By.CSS_SELECTOR, ".answer-section .answer-content")
                     # Check text content, ignoring potential disclaimer
                     all_elements = answer_content.find_elements(By.XPATH, "./*") # Get all direct children
                     
                     # Filter out the disclaimer paragraph if it exists
                     non_disclaimer_elements = [el for el in all_elements if not (el.tag_name == 'p' and 'Disclaimer:' in el.text)]
                     
                     # Check if there are any non-disclaimer elements or if the raw text (minus disclaimer) is empty
                     raw_text = answer_content.text
                     disclaimer_text = ""
                     try:
                         disclaimer_p = answer_content.find_element(By.XPATH, "./p[contains(text(), 'Disclaimer:')]")
                         disclaimer_text = disclaimer_p.text
                     except:
                         pass # No disclaimer found
                         
                     effective_text = raw_text.replace(disclaimer_text, "").strip()
 
                     if not non_disclaimer_elements and not effective_text:
                          empty_answers.append(question_id)
 
                 except Exception as e:
                     # Could mean no answer-section or answer-content found for this question
                     # Log this as a potential structure issue, but maybe not a failure of *this* check
                     print(f"  - Warning: Could not find/process answer content for question '{question_id}': {e}")
                     # Optionally add to a different list if needed
                     # empty_answers.append(f"{question_id} (Structure Error)")
             
             if empty_answers:
                 count = len(empty_answers)
                 details = ", ".join(empty_answers)
                 return {"status": "WARN", "message": f"Found {count} questions with potentially empty answer sections: {details}"}
             
             return {"status": "PASS", "message": f"All {len(questions)} questions appear to have answer content"}
             
         except Exception as e:
             return {"status": "FAIL", "message": f"Answer content verification failed: {str(e)}"}
 
 
     def close(self):
         self.driver.quit()
 
 def main():
     verifier = PastpaperVerifier()
     
     # Check for command-line argument
     if len(sys.argv) > 1:
         html_file_to_verify = sys.argv[1]
         if os.path.exists(html_file_to_verify):
             print(f"\nVerifying {os.path.basename(html_file_to_verify)}...")
             results = verifier.verify_html_file(html_file_to_verify)
             if results:
                 print(f"\nResults for {html_file_to_verify}:")
                 print("-" * 50)
                 for check, result in results.items():
                     status = result["status"]
                     message = result["message"]
                     # Ensure consistent key access
                     status = result.get("status", "UNKNOWN")
                     message = result.get("message", "No message provided")
                     print(f"{check.upper()}: {status} - {message}")
         else:
             print(f"Error: File not found - {html_file_to_verify}")
     else:
         print("Usage: python verify_pastpapers.py <path_to_html_file>")
         # Optionally, keep the old behavior here if needed
         # print("No file specified. Verifying default list...")
         # parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
         # html_files = [...] # Define the list as before
         # for html_file in html_files:
         #     # ... verification logic ...
 
     verifier.close()
 
 if __name__ == "__main__":
     main()

